(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* global AFRAME */\nif (typeof AFRAME === 'undefined') {\n  throw new Error('Component attempted to register before AFRAME was available.');\n}\n\nconst POLY_API_URL = 'https://poly.googleapis.com/v1/assets/';\n\n__webpack_require__(/*! ./lib/LegacyGLTFLoader */ \"./lib/LegacyGLTFLoader.js\");\n\n__webpack_require__(/*! ./lib/GLTFExporter */ \"./lib/GLTFExporter.js\");\n\nconst localforage = __webpack_require__(/*! localforage */ \"./node_modules/localforage/dist/localforage.js\");\n/**\n * Google Poly component for A-Frame.\n */\n\n\nAFRAME.registerComponent('google-poly', {\n  schema: {\n    apiKey: {\n      default: ''\n    },\n    src: {},\n    normalize: {\n      type: 'boolean',\n      default: true\n    },\n    cache: {\n      type: 'boolean',\n      default: true\n    }\n  },\n  multiple: false,\n  init: function () {\n    this.model = null;\n  },\n  update: function (oldData) {\n    const el = this.el;\n    const data = this.data;\n    if (!data.src || !data.apiKey) return;\n    this.remove();\n    localforage.getItem(data.src).then(value => {\n      const useCached = data.cache && value !== null;\n      const cachedModel = value;\n\n      if (!useCached) {\n        this.getGLTFUrl(data.src, data.apiKey).then(this.loadPolyModel).then(gltfModel => {\n          this.processModel(gltfModel, true);\n        }).catch(err => {\n          console.error('ERROR loading Google Poly model from \"' + data.src + '\" : ' + err);\n          el.emit('model-error', err);\n        });\n      } else {\n        console.log('using cached', cachedModel);\n        const loader = new THREE.GLTFLoader();\n        loader.parse(cachedModel, '', gltfModel => {\n          this.processModel(gltfModel, false);\n        });\n      }\n    });\n  },\n  processModel: function (gltfModel, cacheable) {\n    const data = this.data;\n    const el = this.el;\n    const model = gltfModel.scenes ? gltfModel.scene || gltfModel.scenes[0] : gltfModel;\n    this.model = model;\n    el.setObject3D('mesh', this.model); //el.emit('model-loaded', {format: 'gltf', model: this.model})\n\n    if (data.cache && cacheable) {\n      console.log('caching model', data.src);\n      const gltfExporter = new THREE.GLTFExporter();\n      const options = {\n        //onlyVisible: false,\n        truncateDrawRange: false,\n        binary: false,\n        // glb does not work\n        embedImages: true,\n        maxTextureSize: 4096\n      };\n      new Promise(resolve => {\n        gltfExporter.parse(model, result => {\n          const output = JSON.stringify(result, null, 2);\n          resolve(output);\n        }, options);\n      }).then(res => {\n        localforage.setItem(data.src, res).then(value => {\n          console.log('stored', value);\n        }).catch(err => {\n          console.log(err);\n        });\n      });\n    }\n\n    if (data.normalize) {\n      this.normalize();\n    }\n\n    el.emit('model-loaded');\n  },\n  normalize: function () {\n    const el = this.el;\n    const mesh = el.getObject3D('mesh');\n    const span = 1;\n    const offset = new THREE.Vector3(); // data.offset?\n\n    const position = new THREE.Vector3();\n    const scale = new THREE.Vector3();\n    position.copy(el.object3D.position);\n    scale.copy(el.object3D.scale);\n    el.object3D.scale.set(1, 1, 1);\n    el.object3D.position.set(0, 0, 0);\n    el.object3D.updateMatrixWorld(true); // https://github.com/mrdoob/three.js/blob/master/src/core/Geometry.js#L367\n\n    const box = new THREE.Box3();\n    box.setFromObject(mesh);\n    const boundingSphere = new THREE.Sphere();\n    box.getBoundingSphere(boundingSphere);\n    const center = boundingSphere.center;\n    const radius = boundingSphere.radius;\n    const s = (radius === 0 ? 1 : 1.0 / radius) * span;\n    mesh.traverse(child => {\n      if (child.isMesh) {\n        child.geometry.scale(s, s, s);\n        child.geometry.translate(-s * center.x + offset.x, -s * center.y + offset.y, -s * center.z + offset.z);\n        child.geometry.computeBoundingBox();\n        child.geometry.computeBoundingSphere();\n      }\n    });\n    el.object3D.scale.copy(scale);\n    el.object3D.position.copy(position);\n    el.object3D.updateMatrixWorld(true);\n  },\n  _remove: function () {\n    if (this.model) this.el.removeObject3D('mesh');\n  },\n  remove: function () {\n    this._remove();\n  },\n  getGLTFUrl: function (id, apiKey) {\n    const url = POLY_API_URL + id + '/?key=' + apiKey;\n    return fetch(url).then(function (response) {\n      // parse response\n      return response.json().catch(error => {\n        // handle JSON parsing error\n        console.log('ERROR parsing Google Poly API server response JSON.\\nRequested Model: \"' + url + '\"\\nError: \"' + JSON.stringify(error) + '\"');\n        return Promise.reject('Google Poly API server error. Check console for details.');\n      }).then(info => {\n        if (info.error !== undefined) {\n          return Promise.reject('Poly API error: ' + info.error.message);\n        }\n\n        const format = info.formats.find(format => format.formatType === 'GLTF' || format.formatType === 'GLTF2');\n\n        if (format) {\n          const r = info.presentationParams.orientingRotation;\n          const quaternion = new THREE.Quaternion(r.x || 0, r.y || 0, r.z || 0, r.w || 1);\n          return {\n            url: format.root.url,\n            quaternion: quaternion,\n            format: format.formatType\n          };\n        } else {\n          return Promise.reject('Poly asset id:' + id + ' not provided in GLTF or GLTF2 format.');\n        }\n      });\n    });\n  },\n  loadPolyModel: function (data, onProgress) {\n    const url = data.url;\n    const quaternion = data.quaternion;\n    const format = data.format;\n    const matrix = new THREE.Matrix4().makeRotationFromQuaternion(quaternion);\n    return new Promise((resolve, reject) => {\n      const loader = new THREE.FileLoader();\n      loader.setResponseType('arraybuffer');\n      loader.load(url, data => {\n        try {\n          const gltfLoader = format === 'GLTF' ? new THREE.LegacyGLTFLoader() : new THREE.GLTFLoader();\n          const path = THREE.LoaderUtils.extractUrlBase(url);\n          gltfLoader.parse(data, path, gltf => {\n            gltf.scene.traverse(function (child) {\n              if (format === 'GLTF' && child.material) child.material = new THREE.MeshStandardMaterial({\n                vertexColors: THREE.VertexColors\n              });\n              if (child.geometry) child.geometry.applyMatrix(matrix);\n            });\n            resolve(gltf);\n          }, reject);\n        } catch (e) {\n          console.error(e); // For SyntaxError or TypeError, return a generic failure message.\n\n          reject(e.constructor === Error ? e : new Error('THREE.GLTFLoader: Unable to parse model.'));\n        }\n      }, onProgress, reject);\n    });\n  }\n});\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./lib/GLTFExporter.js":
/*!*****************************!*\
  !*** ./lib/GLTFExporter.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("//------------------------------------------------------------------------------\n// Constants\n//------------------------------------------------------------------------------\nvar WEBGL_CONSTANTS = {\n  POINTS: 0x0000,\n  LINES: 0x0001,\n  LINE_LOOP: 0x0002,\n  LINE_STRIP: 0x0003,\n  TRIANGLES: 0x0004,\n  TRIANGLE_STRIP: 0x0005,\n  TRIANGLE_FAN: 0x0006,\n  UNSIGNED_BYTE: 0x1401,\n  UNSIGNED_SHORT: 0x1403,\n  FLOAT: 0x1406,\n  UNSIGNED_INT: 0x1405,\n  ARRAY_BUFFER: 0x8892,\n  ELEMENT_ARRAY_BUFFER: 0x8893,\n  NEAREST: 0x2600,\n  LINEAR: 0x2601,\n  NEAREST_MIPMAP_NEAREST: 0x2700,\n  LINEAR_MIPMAP_NEAREST: 0x2701,\n  NEAREST_MIPMAP_LINEAR: 0x2702,\n  LINEAR_MIPMAP_LINEAR: 0x2703,\n  CLAMP_TO_EDGE: 33071,\n  MIRRORED_REPEAT: 33648,\n  REPEAT: 10497\n};\nvar identityArray = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];\nvar THREE_TO_WEBGL = {};\nTHREE_TO_WEBGL[THREE.NearestFilter] = WEBGL_CONSTANTS.NEAREST;\nTHREE_TO_WEBGL[THREE.NearestMipmapNearestFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[THREE.NearestMipmapLinearFilter] = WEBGL_CONSTANTS.NEAREST_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[THREE.LinearFilter] = WEBGL_CONSTANTS.LINEAR;\nTHREE_TO_WEBGL[THREE.LinearMipmapNearestFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_NEAREST;\nTHREE_TO_WEBGL[THREE.LinearMipmapLinearFilter] = WEBGL_CONSTANTS.LINEAR_MIPMAP_LINEAR;\nTHREE_TO_WEBGL[THREE.ClampToEdgeWrapping] = WEBGL_CONSTANTS.CLAMP_TO_EDGE;\nTHREE_TO_WEBGL[THREE.RepeatWrapping] = WEBGL_CONSTANTS.REPEAT;\nTHREE_TO_WEBGL[THREE.MirroredRepeatWrapping] = WEBGL_CONSTANTS.MIRRORED_REPEAT;\nvar PATH_PROPERTIES = {\n  scale: 'scale',\n  position: 'translation',\n  quaternion: 'rotation',\n  morphTargetInfluences: 'weights'\n}; //------------------------------------------------------------------------------\n// GLTF Exporter\n//------------------------------------------------------------------------------\n\nTHREE.GLTFExporter = function () {};\n\nTHREE.GLTFExporter.prototype = {\n  constructor: THREE.GLTFExporter,\n\n  /**\n   * Parse scenes and generate GLTF output\n   * @param  {THREE.Scene or [THREE.Scenes]} input   THREE.Scene or Array of THREE.Scenes\n   * @param  {Function} onDone  Callback on completed\n   * @param  {Object} options options\n   */\n  parse: function (input, onDone, options) {\n    var DEFAULT_OPTIONS = {\n      binary: false,\n      trs: false,\n      onlyVisible: true,\n      truncateDrawRange: true,\n      embedImages: true,\n      maxTextureSize: Infinity,\n      animations: [],\n      includeCustomExtensions: false\n    };\n    options = Object.assign({}, DEFAULT_OPTIONS, options);\n\n    if (options.animations.length > 0) {\n      // Only TRS properties, and not matrices, may be targeted by animation.\n      options.trs = true;\n    }\n\n    var outputJSON = {\n      asset: {\n        version: '2.0',\n        generator: 'THREE.GLTFExporter'\n      }\n    };\n    var byteOffset = 0;\n    var buffers = [];\n    var pending = [];\n    var nodeMap = new Map();\n    var skins = [];\n    var extensionsUsed = {};\n    var cachedData = {\n      meshes: new Map(),\n      attributes: new Map(),\n      attributesNormalized: new Map(),\n      materials: new Map(),\n      textures: new Map(),\n      images: new Map()\n    };\n    var cachedCanvas;\n    var uids = new Map();\n    var uid = 0;\n    /**\n     * Assign and return a temporal unique id for an object\n     * especially which doesn't have .uuid\n     * @param  {Object} object\n     * @return {Integer}\n     */\n\n    function getUID(object) {\n      if (!uids.has(object)) uids.set(object, uid++);\n      return uids.get(object);\n    }\n    /**\n     * Compare two arrays\n     * @param  {Array} array1 Array 1 to compare\n     * @param  {Array} array2 Array 2 to compare\n     * @return {Boolean}        Returns true if both arrays are equal\n     */\n\n\n    function equalArray(array1, array2) {\n      return array1.length === array2.length && array1.every(function (element, index) {\n        return element === array2[index];\n      });\n    }\n    /**\n     * Is identity matrix\n     *\n     * @param {THREE.Matrix4} matrix\n     * @returns {Boolean} Returns true, if parameter is identity matrix\n     */\n\n\n    function isIdentityMatrix(matrix) {\n      return equalArray(matrix.elements, identityArray);\n    }\n    /**\n     * Converts a string to an ArrayBuffer.\n     * @param  {string} text\n     * @return {ArrayBuffer}\n     */\n\n\n    function stringToArrayBuffer(text) {\n      if (window.TextEncoder !== undefined) {\n        return new TextEncoder().encode(text).buffer;\n      }\n\n      var array = new Uint8Array(new ArrayBuffer(text.length));\n\n      for (var i = 0, il = text.length; i < il; i++) {\n        var value = text.charCodeAt(i); // Replacing multi-byte character with space(0x20).\n\n        array[i] = value > 0xFF ? 0x20 : value;\n      }\n\n      return array.buffer;\n    }\n    /**\n     * Get the min and max vectors from the given attribute\n     * @param  {THREE.BufferAttribute} attribute Attribute to find the min/max in range from start to start + count\n     * @param  {Integer} start\n     * @param  {Integer} count\n     * @return {Object} Object containing the `min` and `max` values (As an array of attribute.itemSize components)\n     */\n\n\n    function getMinMax(attribute, start, count) {\n      var output = {\n        min: new Array(attribute.itemSize).fill(Number.POSITIVE_INFINITY),\n        max: new Array(attribute.itemSize).fill(Number.NEGATIVE_INFINITY)\n      };\n\n      for (var i = start; i < start + count; i++) {\n        for (var a = 0; a < attribute.itemSize; a++) {\n          var value;\n\n          if (attribute.itemSize > 4) {\n            // no support for interleaved data for itemSize > 4\n            value = attribute.array[i * attribute.itemSize + a];\n          } else {\n            if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n          }\n\n          output.min[a] = Math.min(output.min[a], value);\n          output.max[a] = Math.max(output.max[a], value);\n        }\n      }\n\n      return output;\n    }\n    /**\n     * Checks if normal attribute values are normalized.\n     *\n     * @param {THREE.BufferAttribute} normal\n     * @returns {Boolean}\n     *\n     */\n\n\n    function isNormalizedNormalAttribute(normal) {\n      if (cachedData.attributesNormalized.has(normal)) {\n        return false;\n      }\n\n      var v = new THREE.Vector3();\n\n      for (var i = 0, il = normal.count; i < il; i++) {\n        // 0.0005 is from glTF-validator\n        if (Math.abs(v.fromBufferAttribute(normal, i).length() - 1.0) > 0.0005) return false;\n      }\n\n      return true;\n    }\n    /**\n     * Creates normalized normal buffer attribute.\n     *\n     * @param {THREE.BufferAttribute} normal\n     * @returns {THREE.BufferAttribute}\n     *\n     */\n\n\n    function createNormalizedNormalAttribute(normal) {\n      if (cachedData.attributesNormalized.has(normal)) {\n        return cachedData.attributesNormalized.get(normal);\n      }\n\n      var attribute = normal.clone();\n      var v = new THREE.Vector3();\n\n      for (var i = 0, il = attribute.count; i < il; i++) {\n        v.fromBufferAttribute(attribute, i);\n\n        if (v.x === 0 && v.y === 0 && v.z === 0) {\n          // if values can't be normalized set (1, 0, 0)\n          v.setX(1.0);\n        } else {\n          v.normalize();\n        }\n\n        attribute.setXYZ(i, v.x, v.y, v.z);\n      }\n\n      cachedData.attributesNormalized.set(normal, attribute);\n      return attribute;\n    }\n    /**\n     * Get the required size + padding for a buffer, rounded to the next 4-byte boundary.\n     * https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#data-alignment\n     *\n     * @param {Integer} bufferSize The size the original buffer.\n     * @returns {Integer} new buffer size with required padding.\n     *\n     */\n\n\n    function getPaddedBufferSize(bufferSize) {\n      return Math.ceil(bufferSize / 4) * 4;\n    }\n    /**\n     * Returns a buffer aligned to 4-byte boundary.\n     *\n     * @param {ArrayBuffer} arrayBuffer Buffer to pad\n     * @param {Integer} paddingByte (Optional)\n     * @returns {ArrayBuffer} The same buffer if it's already aligned to 4-byte boundary or a new buffer\n     */\n\n\n    function getPaddedArrayBuffer(arrayBuffer, paddingByte) {\n      paddingByte = paddingByte || 0;\n      var paddedLength = getPaddedBufferSize(arrayBuffer.byteLength);\n\n      if (paddedLength !== arrayBuffer.byteLength) {\n        var array = new Uint8Array(paddedLength);\n        array.set(new Uint8Array(arrayBuffer));\n\n        if (paddingByte !== 0) {\n          for (var i = arrayBuffer.byteLength; i < paddedLength; i++) {\n            array[i] = paddingByte;\n          }\n        }\n\n        return array.buffer;\n      }\n\n      return arrayBuffer;\n    }\n    /**\n     * Serializes a userData.\n     *\n     * @param {THREE.Object3D|THREE.Material} object\n     * @param {Object} gltfProperty\n     */\n\n\n    function serializeUserData(object, gltfProperty) {\n      if (Object.keys(object.userData).length === 0) {\n        return;\n      }\n\n      try {\n        var json = JSON.parse(JSON.stringify(object.userData));\n\n        if (options.includeCustomExtensions && json.gltfExtensions) {\n          if (gltfProperty.extensions === undefined) {\n            gltfProperty.extensions = {};\n          }\n\n          for (var extensionName in json.gltfExtensions) {\n            gltfProperty.extensions[extensionName] = json.gltfExtensions[extensionName];\n            extensionsUsed[extensionName] = true;\n          }\n\n          delete json.gltfExtensions;\n        }\n\n        if (Object.keys(json).length > 0) {\n          gltfProperty.extras = json;\n        }\n      } catch (error) {\n        console.warn('THREE.GLTFExporter: userData of \\'' + object.name + '\\' ' + 'won\\'t be serialized because of JSON.stringify error - ' + error.message);\n      }\n    }\n    /**\n     * Applies a texture transform, if present, to the map definition. Requires\n     * the KHR_texture_transform extension.\n     */\n\n\n    function applyTextureTransform(mapDef, texture) {\n      var didTransform = false;\n      var transformDef = {};\n\n      if (texture.offset.x !== 0 || texture.offset.y !== 0) {\n        transformDef.offset = texture.offset.toArray();\n        didTransform = true;\n      }\n\n      if (texture.rotation !== 0) {\n        transformDef.rotation = texture.rotation;\n        didTransform = true;\n      }\n\n      if (texture.repeat.x !== 1 || texture.repeat.y !== 1) {\n        transformDef.scale = texture.repeat.toArray();\n        didTransform = true;\n      }\n\n      if (didTransform) {\n        mapDef.extensions = mapDef.extensions || {};\n        mapDef.extensions['KHR_texture_transform'] = transformDef;\n        extensionsUsed['KHR_texture_transform'] = true;\n      }\n    }\n    /**\n     * Process a buffer to append to the default one.\n     * @param  {ArrayBuffer} buffer\n     * @return {Integer}\n     */\n\n\n    function processBuffer(buffer) {\n      if (!outputJSON.buffers) {\n        outputJSON.buffers = [{\n          byteLength: 0\n        }];\n      } // All buffers are merged before export.\n\n\n      buffers.push(buffer);\n      return 0;\n    }\n    /**\n     * Process and generate a BufferView\n     * @param  {THREE.BufferAttribute} attribute\n     * @param  {number} componentType\n     * @param  {number} start\n     * @param  {number} count\n     * @param  {number} target (Optional) Target usage of the BufferView\n     * @return {Object}\n     */\n\n\n    function processBufferView(attribute, componentType, start, count, target) {\n      if (!outputJSON.bufferViews) {\n        outputJSON.bufferViews = [];\n      } // Create a new dataview and dump the attribute's array into it\n\n\n      var componentSize;\n\n      if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n        componentSize = 1;\n      } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n        componentSize = 2;\n      } else {\n        componentSize = 4;\n      }\n\n      var byteLength = getPaddedBufferSize(count * attribute.itemSize * componentSize);\n      var dataView = new DataView(new ArrayBuffer(byteLength));\n      var offset = 0;\n\n      for (var i = start; i < start + count; i++) {\n        for (var a = 0; a < attribute.itemSize; a++) {\n          var value;\n\n          if (attribute.itemSize > 4) {\n            // no support for interleaved data for itemSize > 4\n            value = attribute.array[i * attribute.itemSize + a];\n          } else {\n            if (a === 0) value = attribute.getX(i);else if (a === 1) value = attribute.getY(i);else if (a === 2) value = attribute.getZ(i);else if (a === 3) value = attribute.getW(i);\n          }\n\n          if (componentType === WEBGL_CONSTANTS.FLOAT) {\n            dataView.setFloat32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_INT) {\n            dataView.setUint32(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_SHORT) {\n            dataView.setUint16(offset, value, true);\n          } else if (componentType === WEBGL_CONSTANTS.UNSIGNED_BYTE) {\n            dataView.setUint8(offset, value);\n          }\n\n          offset += componentSize;\n        }\n      }\n\n      var gltfBufferView = {\n        buffer: processBuffer(dataView.buffer),\n        byteOffset: byteOffset,\n        byteLength: byteLength\n      };\n      if (target !== undefined) gltfBufferView.target = target;\n\n      if (target === WEBGL_CONSTANTS.ARRAY_BUFFER) {\n        // Only define byteStride for vertex attributes.\n        gltfBufferView.byteStride = attribute.itemSize * componentSize;\n      }\n\n      byteOffset += byteLength;\n      outputJSON.bufferViews.push(gltfBufferView); // @TODO Merge bufferViews where possible.\n\n      var output = {\n        id: outputJSON.bufferViews.length - 1,\n        byteLength: 0\n      };\n      return output;\n    }\n    /**\n     * Process and generate a BufferView from an image Blob.\n     * @param {Blob} blob\n     * @return {Promise<Integer>}\n     */\n\n\n    function processBufferViewImage(blob) {\n      if (!outputJSON.bufferViews) {\n        outputJSON.bufferViews = [];\n      }\n\n      return new Promise(function (resolve) {\n        var reader = new window.FileReader();\n        reader.readAsArrayBuffer(blob);\n\n        reader.onloadend = function () {\n          var buffer = getPaddedArrayBuffer(reader.result);\n          var bufferView = {\n            buffer: processBuffer(buffer),\n            byteOffset: byteOffset,\n            byteLength: buffer.byteLength\n          };\n          byteOffset += buffer.byteLength;\n          outputJSON.bufferViews.push(bufferView);\n          resolve(outputJSON.bufferViews.length - 1);\n        };\n      });\n    }\n    /**\n     * Process attribute to generate an accessor\n     * @param  {THREE.BufferAttribute} attribute Attribute to process\n     * @param  {THREE.BufferGeometry} geometry (Optional) Geometry used for truncated draw range\n     * @param  {Integer} start (Optional)\n     * @param  {Integer} count (Optional)\n     * @return {Integer}           Index of the processed accessor on the \"accessors\" array\n     */\n\n\n    function processAccessor(attribute, geometry, start, count) {\n      var types = {\n        1: 'SCALAR',\n        2: 'VEC2',\n        3: 'VEC3',\n        4: 'VEC4',\n        16: 'MAT4'\n      };\n      var componentType; // Detect the component type of the attribute array (float, uint or ushort)\n\n      if (attribute.array.constructor === Float32Array) {\n        componentType = WEBGL_CONSTANTS.FLOAT;\n      } else if (attribute.array.constructor === Uint32Array) {\n        componentType = WEBGL_CONSTANTS.UNSIGNED_INT;\n      } else if (attribute.array.constructor === Uint16Array) {\n        componentType = WEBGL_CONSTANTS.UNSIGNED_SHORT;\n      } else if (attribute.array.constructor === Uint8Array) {\n        componentType = WEBGL_CONSTANTS.UNSIGNED_BYTE;\n      } else {\n        throw new Error('THREE.GLTFExporter: Unsupported bufferAttribute component type.');\n      }\n\n      if (start === undefined) start = 0;\n      if (count === undefined) count = attribute.count; // @TODO Indexed buffer geometry with drawRange not supported yet\n\n      if (options.truncateDrawRange && geometry !== undefined && geometry.index === null) {\n        var end = start + count;\n        var end2 = geometry.drawRange.count === Infinity ? attribute.count : geometry.drawRange.start + geometry.drawRange.count;\n        start = Math.max(start, geometry.drawRange.start);\n        count = Math.min(end, end2) - start;\n        if (count < 0) count = 0;\n      } // Skip creating an accessor if the attribute doesn't have data to export\n\n\n      if (count === 0) {\n        return null;\n      }\n\n      var minMax = getMinMax(attribute, start, count);\n      var bufferViewTarget; // If geometry isn't provided, don't infer the target usage of the bufferView. For\n      // animation samplers, target must not be set.\n\n      if (geometry !== undefined) {\n        bufferViewTarget = attribute === geometry.index ? WEBGL_CONSTANTS.ELEMENT_ARRAY_BUFFER : WEBGL_CONSTANTS.ARRAY_BUFFER;\n      }\n\n      var bufferView = processBufferView(attribute, componentType, start, count, bufferViewTarget);\n      var gltfAccessor = {\n        bufferView: bufferView.id,\n        byteOffset: bufferView.byteOffset,\n        componentType: componentType,\n        count: count,\n        max: minMax.max,\n        min: minMax.min,\n        type: types[attribute.itemSize]\n      };\n\n      if (attribute.normalized === true) {\n        gltfAccessor.normalized = true;\n      }\n\n      if (!outputJSON.accessors) {\n        outputJSON.accessors = [];\n      }\n\n      outputJSON.accessors.push(gltfAccessor);\n      return outputJSON.accessors.length - 1;\n    }\n    /**\n     * Process image\n     * @param  {Image} image to process\n     * @param  {Integer} format of the image (e.g. THREE.RGBFormat, THREE.RGBAFormat etc)\n     * @param  {Boolean} flipY before writing out the image\n     * @return {Integer}     Index of the processed texture in the \"images\" array\n     */\n\n\n    function processImage(image, format, flipY) {\n      if (!cachedData.images.has(image)) {\n        cachedData.images.set(image, {});\n      }\n\n      var cachedImages = cachedData.images.get(image);\n      var mimeType = format === THREE.RGBAFormat ? 'image/png' : 'image/jpeg';\n      var key = mimeType + ':flipY/' + flipY.toString();\n\n      if (cachedImages[key] !== undefined) {\n        return cachedImages[key];\n      }\n\n      if (!outputJSON.images) {\n        outputJSON.images = [];\n      }\n\n      var gltfImage = {\n        mimeType: mimeType\n      };\n\n      if (options.embedImages) {\n        var canvas = cachedCanvas = cachedCanvas || document.createElement('canvas');\n        canvas.width = Math.min(image.width, options.maxTextureSize);\n        canvas.height = Math.min(image.height, options.maxTextureSize);\n        var ctx = canvas.getContext('2d');\n\n        if (flipY === true) {\n          ctx.translate(0, canvas.height);\n          ctx.scale(1, -1);\n        }\n\n        if (typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement || typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement || typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap) {\n          ctx.drawImage(image, 0, 0, canvas.width, canvas.height);\n        } else {\n          if (format !== THREE.RGBAFormat && format !== THREE.RGBFormat) {\n            console.error('GLTFExporter: Only RGB and RGBA formats are supported.');\n          }\n\n          if (image.width > options.maxTextureSize || image.height > options.maxTextureSize) {\n            console.warn('GLTFExporter: Image size is bigger than maxTextureSize', image);\n          }\n\n          let data = image.data;\n\n          if (format === THREE.RGBFormat) {\n            data = new Uint8ClampedArray(image.height * image.width * 4);\n\n            for (var i = 0, j = 0; i < data.length; i += 4, j += 3) {\n              data[i + 0] = image.data[j + 0];\n              data[i + 1] = image.data[j + 1];\n              data[i + 2] = image.data[j + 2];\n              data[i + 3] = 255;\n            }\n          }\n\n          ctx.putImageData(new ImageData(data, image.width, image.height), 0, 0);\n        }\n\n        if (options.binary === true) {\n          pending.push(new Promise(function (resolve) {\n            canvas.toBlob(function (blob) {\n              processBufferViewImage(blob).then(function (bufferViewIndex) {\n                gltfImage.bufferView = bufferViewIndex;\n                resolve();\n              });\n            }, mimeType);\n          }));\n        } else {\n          gltfImage.uri = canvas.toDataURL(mimeType);\n        }\n      } else {\n        gltfImage.uri = image.src;\n      }\n\n      outputJSON.images.push(gltfImage);\n      var index = outputJSON.images.length - 1;\n      cachedImages[key] = index;\n      return index;\n    }\n    /**\n     * Process sampler\n     * @param  {Texture} map Texture to process\n     * @return {Integer}     Index of the processed texture in the \"samplers\" array\n     */\n\n\n    function processSampler(map) {\n      if (!outputJSON.samplers) {\n        outputJSON.samplers = [];\n      }\n\n      var gltfSampler = {\n        magFilter: THREE_TO_WEBGL[map.magFilter],\n        minFilter: THREE_TO_WEBGL[map.minFilter],\n        wrapS: THREE_TO_WEBGL[map.wrapS],\n        wrapT: THREE_TO_WEBGL[map.wrapT]\n      };\n      outputJSON.samplers.push(gltfSampler);\n      return outputJSON.samplers.length - 1;\n    }\n    /**\n     * Process texture\n     * @param  {Texture} map Map to process\n     * @return {Integer}     Index of the processed texture in the \"textures\" array\n     */\n\n\n    function processTexture(map) {\n      if (cachedData.textures.has(map)) {\n        return cachedData.textures.get(map);\n      }\n\n      if (!outputJSON.textures) {\n        outputJSON.textures = [];\n      }\n\n      var gltfTexture = {\n        sampler: processSampler(map),\n        source: processImage(map.image, map.format, map.flipY)\n      };\n\n      if (map.name) {\n        gltfTexture.name = map.name;\n      }\n\n      outputJSON.textures.push(gltfTexture);\n      var index = outputJSON.textures.length - 1;\n      cachedData.textures.set(map, index);\n      return index;\n    }\n    /**\n     * Process material\n     * @param  {THREE.Material} material Material to process\n     * @return {Integer}      Index of the processed material in the \"materials\" array\n     */\n\n\n    function processMaterial(material) {\n      if (cachedData.materials.has(material)) {\n        return cachedData.materials.get(material);\n      }\n\n      if (material.isShaderMaterial) {\n        console.warn('GLTFExporter: THREE.ShaderMaterial not supported.');\n        return null;\n      }\n\n      if (!outputJSON.materials) {\n        outputJSON.materials = [];\n      } // @QUESTION Should we avoid including any attribute that has the default value?\n\n\n      var gltfMaterial = {\n        pbrMetallicRoughness: {}\n      };\n\n      if (material.isMeshBasicMaterial) {\n        gltfMaterial.extensions = {\n          KHR_materials_unlit: {}\n        };\n        extensionsUsed['KHR_materials_unlit'] = true;\n      } else if (material.isGLTFSpecularGlossinessMaterial) {\n        gltfMaterial.extensions = {\n          KHR_materials_pbrSpecularGlossiness: {}\n        };\n        extensionsUsed['KHR_materials_pbrSpecularGlossiness'] = true;\n      } else if (!material.isMeshStandardMaterial) {\n        console.warn('GLTFExporter: Use MeshStandardMaterial or MeshBasicMaterial for best results.');\n      } // pbrMetallicRoughness.baseColorFactor\n\n\n      var color = material.color.toArray().concat([material.opacity]);\n\n      if (!equalArray(color, [1, 1, 1, 1])) {\n        gltfMaterial.pbrMetallicRoughness.baseColorFactor = color;\n      }\n\n      if (material.isMeshStandardMaterial) {\n        gltfMaterial.pbrMetallicRoughness.metallicFactor = material.metalness;\n        gltfMaterial.pbrMetallicRoughness.roughnessFactor = material.roughness;\n      } else if (material.isMeshBasicMaterial) {\n        gltfMaterial.pbrMetallicRoughness.metallicFactor = 0.0;\n        gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.9;\n      } else {\n        gltfMaterial.pbrMetallicRoughness.metallicFactor = 0.5;\n        gltfMaterial.pbrMetallicRoughness.roughnessFactor = 0.5;\n      } // pbrSpecularGlossiness diffuse, specular and glossiness factor\n\n\n      if (material.isGLTFSpecularGlossinessMaterial) {\n        if (gltfMaterial.pbrMetallicRoughness.baseColorFactor) {\n          gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseFactor = gltfMaterial.pbrMetallicRoughness.baseColorFactor;\n        }\n\n        var specularFactor = [1, 1, 1];\n        material.specular.toArray(specularFactor, 0);\n        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularFactor = specularFactor;\n        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.glossinessFactor = material.glossiness;\n      } // pbrMetallicRoughness.metallicRoughnessTexture\n\n\n      if (material.metalnessMap || material.roughnessMap) {\n        if (material.metalnessMap === material.roughnessMap) {\n          var metalRoughMapDef = {\n            index: processTexture(material.metalnessMap)\n          };\n          applyTextureTransform(metalRoughMapDef, material.metalnessMap);\n          gltfMaterial.pbrMetallicRoughness.metallicRoughnessTexture = metalRoughMapDef;\n        } else {\n          console.warn('THREE.GLTFExporter: Ignoring metalnessMap and roughnessMap because they are not the same Texture.');\n        }\n      } // pbrMetallicRoughness.baseColorTexture or pbrSpecularGlossiness diffuseTexture\n\n\n      if (material.map) {\n        var baseColorMapDef = {\n          index: processTexture(material.map)\n        };\n        applyTextureTransform(baseColorMapDef, material.map);\n\n        if (material.isGLTFSpecularGlossinessMaterial) {\n          gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.diffuseTexture = baseColorMapDef;\n        }\n\n        gltfMaterial.pbrMetallicRoughness.baseColorTexture = baseColorMapDef;\n      } // pbrSpecularGlossiness specular map\n\n\n      if (material.isGLTFSpecularGlossinessMaterial && material.specularMap) {\n        var specularMapDef = {\n          index: processTexture(material.specularMap)\n        };\n        applyTextureTransform(specularMapDef, material.specularMap);\n        gltfMaterial.extensions.KHR_materials_pbrSpecularGlossiness.specularGlossinessTexture = specularMapDef;\n      }\n\n      if (material.emissive) {\n        // emissiveFactor\n        var emissive = material.emissive.clone().multiplyScalar(material.emissiveIntensity).toArray();\n\n        if (!equalArray(emissive, [0, 0, 0])) {\n          gltfMaterial.emissiveFactor = emissive;\n        } // emissiveTexture\n\n\n        if (material.emissiveMap) {\n          var emissiveMapDef = {\n            index: processTexture(material.emissiveMap)\n          };\n          applyTextureTransform(emissiveMapDef, material.emissiveMap);\n          gltfMaterial.emissiveTexture = emissiveMapDef;\n        }\n      } // normalTexture\n\n\n      if (material.normalMap) {\n        var normalMapDef = {\n          index: processTexture(material.normalMap)\n        };\n\n        if (material.normalScale && material.normalScale.x !== -1) {\n          if (material.normalScale.x !== material.normalScale.y) {\n            console.warn('THREE.GLTFExporter: Normal scale components are different, ignoring Y and exporting X.');\n          }\n\n          normalMapDef.scale = material.normalScale.x;\n        }\n\n        applyTextureTransform(normalMapDef, material.normalMap);\n        gltfMaterial.normalTexture = normalMapDef;\n      } // occlusionTexture\n\n\n      if (material.aoMap) {\n        var occlusionMapDef = {\n          index: processTexture(material.aoMap),\n          texCoord: 1\n        };\n\n        if (material.aoMapIntensity !== 1.0) {\n          occlusionMapDef.strength = material.aoMapIntensity;\n        }\n\n        applyTextureTransform(occlusionMapDef, material.aoMap);\n        gltfMaterial.occlusionTexture = occlusionMapDef;\n      } // alphaMode\n\n\n      if (material.transparent) {\n        gltfMaterial.alphaMode = 'BLEND';\n      } else {\n        if (material.alphaTest > 0.0) {\n          gltfMaterial.alphaMode = 'MASK';\n          gltfMaterial.alphaCutoff = material.alphaTest;\n        }\n      } // doubleSided\n\n\n      if (material.side === THREE.DoubleSide) {\n        gltfMaterial.doubleSided = true;\n      }\n\n      if (material.name !== '') {\n        gltfMaterial.name = material.name;\n      }\n\n      serializeUserData(material, gltfMaterial);\n      outputJSON.materials.push(gltfMaterial);\n      var index = outputJSON.materials.length - 1;\n      cachedData.materials.set(material, index);\n      return index;\n    }\n    /**\n     * Process mesh\n     * @param  {THREE.Mesh} mesh Mesh to process\n     * @return {Integer}      Index of the processed mesh in the \"meshes\" array\n     */\n\n\n    function processMesh(mesh) {\n      var meshCacheKeyParts = [mesh.geometry.uuid];\n\n      if (Array.isArray(mesh.material)) {\n        for (var i = 0, l = mesh.material.length; i < l; i++) {\n          meshCacheKeyParts.push(mesh.material[i].uuid);\n        }\n      } else {\n        meshCacheKeyParts.push(mesh.material.uuid);\n      }\n\n      var meshCacheKey = meshCacheKeyParts.join(':');\n\n      if (cachedData.meshes.has(meshCacheKey)) {\n        return cachedData.meshes.get(meshCacheKey);\n      }\n\n      var geometry = mesh.geometry;\n      var mode; // Use the correct mode\n\n      if (mesh.isLineSegments) {\n        mode = WEBGL_CONSTANTS.LINES;\n      } else if (mesh.isLineLoop) {\n        mode = WEBGL_CONSTANTS.LINE_LOOP;\n      } else if (mesh.isLine) {\n        mode = WEBGL_CONSTANTS.LINE_STRIP;\n      } else if (mesh.isPoints) {\n        mode = WEBGL_CONSTANTS.POINTS;\n      } else {\n        mode = mesh.material.wireframe ? WEBGL_CONSTANTS.LINES : WEBGL_CONSTANTS.TRIANGLES;\n      }\n\n      if (!geometry.isBufferGeometry) {\n        console.warn('GLTFExporter: Exporting THREE.Geometry will increase file size. Use THREE.BufferGeometry instead.');\n        geometry = new THREE.BufferGeometry().setFromObject(mesh);\n      }\n\n      var gltfMesh = {};\n      var attributes = {};\n      var primitives = [];\n      var targets = []; // Conversion between attributes names in threejs and gltf spec\n\n      var nameConversion = {\n        uv: 'TEXCOORD_0',\n        uv2: 'TEXCOORD_1',\n        color: 'COLOR_0',\n        skinWeight: 'WEIGHTS_0',\n        skinIndex: 'JOINTS_0'\n      };\n      var originalNormal = geometry.getAttribute('normal');\n\n      if (originalNormal !== undefined && !isNormalizedNormalAttribute(originalNormal)) {\n        console.warn('THREE.GLTFExporter: Creating normalized normal attribute from the non-normalized one.');\n        geometry.setAttribute('normal', createNormalizedNormalAttribute(originalNormal));\n      } // @QUESTION Detect if .vertexColors = true?\n      // For every attribute create an accessor\n\n\n      var modifiedAttribute = null;\n\n      for (var attributeName in geometry.attributes) {\n        // Ignore morph target attributes, which are exported later.\n        if (attributeName.substr(0, 5) === 'morph') continue;\n        var attribute = geometry.attributes[attributeName];\n        attributeName = nameConversion[attributeName] || attributeName.toUpperCase(); // Prefix all geometry attributes except the ones specifically\n        // listed in the spec; non-spec attributes are considered custom.\n\n        var validVertexAttributes = /^(POSITION|NORMAL|TANGENT|TEXCOORD_\\d+|COLOR_\\d+|JOINTS_\\d+|WEIGHTS_\\d+)$/;\n\n        if (!validVertexAttributes.test(attributeName)) {\n          attributeName = '_' + attributeName;\n        }\n\n        if (cachedData.attributes.has(getUID(attribute))) {\n          attributes[attributeName] = cachedData.attributes.get(getUID(attribute));\n          continue;\n        } // JOINTS_0 must be UNSIGNED_BYTE or UNSIGNED_SHORT.\n\n\n        modifiedAttribute = null;\n        var array = attribute.array;\n\n        if (attributeName === 'JOINTS_0' && !(array instanceof Uint16Array) && !(array instanceof Uint8Array)) {\n          console.warn('GLTFExporter: Attribute \"skinIndex\" converted to type UNSIGNED_SHORT.');\n          modifiedAttribute = new THREE.BufferAttribute(new Uint16Array(array), attribute.itemSize, attribute.normalized);\n        }\n\n        var accessor = processAccessor(modifiedAttribute || attribute, geometry);\n\n        if (accessor !== null) {\n          attributes[attributeName] = accessor;\n          cachedData.attributes.set(getUID(attribute), accessor);\n        }\n      }\n\n      if (originalNormal !== undefined) geometry.setAttribute('normal', originalNormal); // Skip if no exportable attributes found\n\n      if (Object.keys(attributes).length === 0) {\n        return null;\n      } // Morph targets\n\n\n      if (mesh.morphTargetInfluences !== undefined && mesh.morphTargetInfluences.length > 0) {\n        var weights = [];\n        var targetNames = [];\n        var reverseDictionary = {};\n\n        if (mesh.morphTargetDictionary !== undefined) {\n          for (var key in mesh.morphTargetDictionary) {\n            reverseDictionary[mesh.morphTargetDictionary[key]] = key;\n          }\n        }\n\n        for (var i = 0; i < mesh.morphTargetInfluences.length; ++i) {\n          var target = {};\n          var warned = false;\n\n          for (var attributeName in geometry.morphAttributes) {\n            // glTF 2.0 morph supports only POSITION/NORMAL/TANGENT.\n            // Three.js doesn't support TANGENT yet.\n            if (attributeName !== 'position' && attributeName !== 'normal') {\n              if (!warned) {\n                console.warn('GLTFExporter: Only POSITION and NORMAL morph are supported.');\n                warned = true;\n              }\n\n              continue;\n            }\n\n            var attribute = geometry.morphAttributes[attributeName][i];\n            var gltfAttributeName = attributeName.toUpperCase(); // Three.js morph attribute has absolute values while the one of glTF has relative values.\n            //\n            // glTF 2.0 Specification:\n            // https://github.com/KhronosGroup/glTF/tree/master/specification/2.0#morph-targets\n\n            var baseAttribute = geometry.attributes[attributeName];\n\n            if (cachedData.attributes.has(getUID(attribute))) {\n              target[gltfAttributeName] = cachedData.attributes.get(getUID(attribute));\n              continue;\n            } // Clones attribute not to override\n\n\n            var relativeAttribute = attribute.clone();\n\n            if (!geometry.morphTargetsRelative) {\n              for (var j = 0, jl = attribute.count; j < jl; j++) {\n                relativeAttribute.setXYZ(j, attribute.getX(j) - baseAttribute.getX(j), attribute.getY(j) - baseAttribute.getY(j), attribute.getZ(j) - baseAttribute.getZ(j));\n              }\n            }\n\n            target[gltfAttributeName] = processAccessor(relativeAttribute, geometry);\n            cachedData.attributes.set(getUID(baseAttribute), target[gltfAttributeName]);\n          }\n\n          targets.push(target);\n          weights.push(mesh.morphTargetInfluences[i]);\n          if (mesh.morphTargetDictionary !== undefined) targetNames.push(reverseDictionary[i]);\n        }\n\n        gltfMesh.weights = weights;\n\n        if (targetNames.length > 0) {\n          gltfMesh.extras = {};\n          gltfMesh.extras.targetNames = targetNames;\n        }\n      }\n\n      var isMultiMaterial = Array.isArray(mesh.material);\n      if (isMultiMaterial && geometry.groups.length === 0) return null;\n      var materials = isMultiMaterial ? mesh.material : [mesh.material];\n      var groups = isMultiMaterial ? geometry.groups : [{\n        materialIndex: 0,\n        start: undefined,\n        count: undefined\n      }];\n\n      for (var i = 0, il = groups.length; i < il; i++) {\n        var primitive = {\n          mode: mode,\n          attributes: attributes\n        };\n        serializeUserData(geometry, primitive);\n        if (targets.length > 0) primitive.targets = targets;\n\n        if (geometry.index !== null) {\n          var cacheKey = getUID(geometry.index);\n\n          if (groups[i].start !== undefined || groups[i].count !== undefined) {\n            cacheKey += ':' + groups[i].start + ':' + groups[i].count;\n          }\n\n          if (cachedData.attributes.has(cacheKey)) {\n            primitive.indices = cachedData.attributes.get(cacheKey);\n          } else {\n            primitive.indices = processAccessor(geometry.index, geometry, groups[i].start, groups[i].count);\n            cachedData.attributes.set(cacheKey, primitive.indices);\n          }\n\n          if (primitive.indices === null) delete primitive.indices;\n        }\n\n        var material = processMaterial(materials[groups[i].materialIndex]);\n\n        if (material !== null) {\n          primitive.material = material;\n        }\n\n        primitives.push(primitive);\n      }\n\n      gltfMesh.primitives = primitives;\n\n      if (!outputJSON.meshes) {\n        outputJSON.meshes = [];\n      }\n\n      outputJSON.meshes.push(gltfMesh);\n      var index = outputJSON.meshes.length - 1;\n      cachedData.meshes.set(meshCacheKey, index);\n      return index;\n    }\n    /**\n     * Process camera\n     * @param  {THREE.Camera} camera Camera to process\n     * @return {Integer}      Index of the processed mesh in the \"camera\" array\n     */\n\n\n    function processCamera(camera) {\n      if (!outputJSON.cameras) {\n        outputJSON.cameras = [];\n      }\n\n      var isOrtho = camera.isOrthographicCamera;\n      var gltfCamera = {\n        type: isOrtho ? 'orthographic' : 'perspective'\n      };\n\n      if (isOrtho) {\n        gltfCamera.orthographic = {\n          xmag: camera.right * 2,\n          ymag: camera.top * 2,\n          zfar: camera.far <= 0 ? 0.001 : camera.far,\n          znear: camera.near < 0 ? 0 : camera.near\n        };\n      } else {\n        gltfCamera.perspective = {\n          aspectRatio: camera.aspect,\n          yfov: THREE.MathUtils.degToRad(camera.fov),\n          zfar: camera.far <= 0 ? 0.001 : camera.far,\n          znear: camera.near < 0 ? 0 : camera.near\n        };\n      }\n\n      if (camera.name !== '') {\n        gltfCamera.name = camera.type;\n      }\n\n      outputJSON.cameras.push(gltfCamera);\n      return outputJSON.cameras.length - 1;\n    }\n    /**\n     * Creates glTF animation entry from AnimationClip object.\n     *\n     * Status:\n     * - Only properties listed in PATH_PROPERTIES may be animated.\n     *\n     * @param {THREE.AnimationClip} clip\n     * @param {THREE.Object3D} root\n     * @return {number}\n     */\n\n\n    function processAnimation(clip, root) {\n      if (!outputJSON.animations) {\n        outputJSON.animations = [];\n      }\n\n      clip = THREE.GLTFExporter.Utils.mergeMorphTargetTracks(clip.clone(), root);\n      var tracks = clip.tracks;\n      var channels = [];\n      var samplers = [];\n\n      for (var i = 0; i < tracks.length; ++i) {\n        var track = tracks[i];\n        var trackBinding = THREE.PropertyBinding.parseTrackName(track.name);\n        var trackNode = THREE.PropertyBinding.findNode(root, trackBinding.nodeName);\n        var trackProperty = PATH_PROPERTIES[trackBinding.propertyName];\n\n        if (trackBinding.objectName === 'bones') {\n          if (trackNode.isSkinnedMesh === true) {\n            trackNode = trackNode.skeleton.getBoneByName(trackBinding.objectIndex);\n          } else {\n            trackNode = undefined;\n          }\n        }\n\n        if (!trackNode || !trackProperty) {\n          console.warn('THREE.GLTFExporter: Could not export animation track \"%s\".', track.name);\n          return null;\n        }\n\n        var inputItemSize = 1;\n        var outputItemSize = track.values.length / track.times.length;\n\n        if (trackProperty === PATH_PROPERTIES.morphTargetInfluences) {\n          outputItemSize /= trackNode.morphTargetInfluences.length;\n        }\n\n        var interpolation; // @TODO export CubicInterpolant(InterpolateSmooth) as CUBICSPLINE\n        // Detecting glTF cubic spline interpolant by checking factory method's special property\n        // GLTFCubicSplineInterpolant is a custom interpolant and track doesn't return\n        // valid value from .getInterpolation().\n\n        if (track.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline === true) {\n          interpolation = 'CUBICSPLINE'; // itemSize of CUBICSPLINE keyframe is 9\n          // (VEC3 * 3: inTangent, splineVertex, and outTangent)\n          // but needs to be stored as VEC3 so dividing by 3 here.\n\n          outputItemSize /= 3;\n        } else if (track.getInterpolation() === THREE.InterpolateDiscrete) {\n          interpolation = 'STEP';\n        } else {\n          interpolation = 'LINEAR';\n        }\n\n        samplers.push({\n          input: processAccessor(new THREE.BufferAttribute(track.times, inputItemSize)),\n          output: processAccessor(new THREE.BufferAttribute(track.values, outputItemSize)),\n          interpolation: interpolation\n        });\n        channels.push({\n          sampler: samplers.length - 1,\n          target: {\n            node: nodeMap.get(trackNode),\n            path: trackProperty\n          }\n        });\n      }\n\n      outputJSON.animations.push({\n        name: clip.name || 'clip_' + outputJSON.animations.length,\n        samplers: samplers,\n        channels: channels\n      });\n      return outputJSON.animations.length - 1;\n    }\n\n    function processSkin(object) {\n      var node = outputJSON.nodes[nodeMap.get(object)];\n      var skeleton = object.skeleton;\n      if (skeleton === undefined) return null;\n      var rootJoint = object.skeleton.bones[0];\n      if (rootJoint === undefined) return null;\n      var joints = [];\n      var inverseBindMatrices = new Float32Array(skeleton.bones.length * 16);\n      var temporaryBoneInverse = new THREE.Matrix4();\n\n      for (var i = 0; i < skeleton.bones.length; ++i) {\n        joints.push(nodeMap.get(skeleton.bones[i]));\n        temporaryBoneInverse.copy(skeleton.boneInverses[i]);\n        temporaryBoneInverse.multiply(object.bindMatrix).toArray(inverseBindMatrices, i * 16);\n      }\n\n      if (outputJSON.skins === undefined) {\n        outputJSON.skins = [];\n      }\n\n      outputJSON.skins.push({\n        inverseBindMatrices: processAccessor(new THREE.BufferAttribute(inverseBindMatrices, 16)),\n        joints: joints,\n        skeleton: nodeMap.get(rootJoint)\n      });\n      var skinIndex = node.skin = outputJSON.skins.length - 1;\n      return skinIndex;\n    }\n\n    function processLight(light) {\n      var lightDef = {};\n      if (light.name) lightDef.name = light.name;\n      lightDef.color = light.color.toArray();\n      lightDef.intensity = light.intensity;\n\n      if (light.isDirectionalLight) {\n        lightDef.type = 'directional';\n      } else if (light.isPointLight) {\n        lightDef.type = 'point';\n        if (light.distance > 0) lightDef.range = light.distance;\n      } else if (light.isSpotLight) {\n        lightDef.type = 'spot';\n        if (light.distance > 0) lightDef.range = light.distance;\n        lightDef.spot = {};\n        lightDef.spot.innerConeAngle = (light.penumbra - 1.0) * light.angle * -1.0;\n        lightDef.spot.outerConeAngle = light.angle;\n      }\n\n      if (light.decay !== undefined && light.decay !== 2) {\n        console.warn('THREE.GLTFExporter: Light decay may be lost. glTF is physically-based, ' + 'and expects light.decay=2.');\n      }\n\n      if (light.target && (light.target.parent !== light || light.target.position.x !== 0 || light.target.position.y !== 0 || light.target.position.z !== -1)) {\n        console.warn('THREE.GLTFExporter: Light direction may be lost. For best results, ' + 'make light.target a child of the light with position 0,0,-1.');\n      }\n\n      var lights = outputJSON.extensions['KHR_lights_punctual'].lights;\n      lights.push(lightDef);\n      return lights.length - 1;\n    }\n    /**\n     * Process Object3D node\n     * @param  {THREE.Object3D} node Object3D to processNode\n     * @return {Integer}      Index of the node in the nodes list\n     */\n\n\n    function processNode(object) {\n      if (!outputJSON.nodes) {\n        outputJSON.nodes = [];\n      }\n\n      var gltfNode = {};\n\n      if (options.trs) {\n        var rotation = object.quaternion.toArray();\n        var position = object.position.toArray();\n        var scale = object.scale.toArray();\n\n        if (!equalArray(rotation, [0, 0, 0, 1])) {\n          gltfNode.rotation = rotation;\n        }\n\n        if (!equalArray(position, [0, 0, 0])) {\n          gltfNode.translation = position;\n        }\n\n        if (!equalArray(scale, [1, 1, 1])) {\n          gltfNode.scale = scale;\n        }\n      } else {\n        if (object.matrixAutoUpdate) {\n          object.updateMatrix();\n        }\n\n        if (isIdentityMatrix(object.matrix) === false) {\n          gltfNode.matrix = object.matrix.elements;\n        }\n      } // We don't export empty strings name because it represents no-name in Three.js.\n\n\n      if (object.name !== '') {\n        gltfNode.name = String(object.name);\n      }\n\n      serializeUserData(object, gltfNode);\n\n      if (object.isMesh || object.isLine || object.isPoints) {\n        var mesh = processMesh(object);\n\n        if (mesh !== null) {\n          gltfNode.mesh = mesh;\n        }\n      } else if (object.isCamera) {\n        gltfNode.camera = processCamera(object);\n      } else if (object.isDirectionalLight || object.isPointLight || object.isSpotLight) {\n        if (!extensionsUsed['KHR_lights_punctual']) {\n          outputJSON.extensions = outputJSON.extensions || {};\n          outputJSON.extensions['KHR_lights_punctual'] = {\n            lights: []\n          };\n          extensionsUsed['KHR_lights_punctual'] = true;\n        }\n\n        gltfNode.extensions = gltfNode.extensions || {};\n        gltfNode.extensions['KHR_lights_punctual'] = {\n          light: processLight(object)\n        };\n      } else if (object.isLight) {\n        console.warn('THREE.GLTFExporter: Only directional, point, and spot lights are supported.', object);\n        return null;\n      }\n\n      if (object.isSkinnedMesh) {\n        skins.push(object);\n      }\n\n      if (object.children.length > 0) {\n        var children = [];\n\n        for (var i = 0, l = object.children.length; i < l; i++) {\n          var child = object.children[i];\n\n          if (child.visible || options.onlyVisible === false) {\n            var node = processNode(child);\n\n            if (node !== null) {\n              children.push(node);\n            }\n          }\n        }\n\n        if (children.length > 0) {\n          gltfNode.children = children;\n        }\n      }\n\n      outputJSON.nodes.push(gltfNode);\n      var nodeIndex = outputJSON.nodes.length - 1;\n      nodeMap.set(object, nodeIndex);\n      return nodeIndex;\n    }\n    /**\n     * Process Scene\n     * @param  {THREE.Scene} node Scene to process\n     */\n\n\n    function processScene(scene) {\n      if (!outputJSON.scenes) {\n        outputJSON.scenes = [];\n        outputJSON.scene = 0;\n      }\n\n      var gltfScene = {};\n\n      if (scene.name !== '') {\n        gltfScene.name = scene.name;\n      }\n\n      outputJSON.scenes.push(gltfScene);\n      var nodes = [];\n\n      for (var i = 0, l = scene.children.length; i < l; i++) {\n        var child = scene.children[i];\n\n        if (child.visible || options.onlyVisible === false) {\n          var node = processNode(child);\n\n          if (node !== null) {\n            nodes.push(node);\n          }\n        }\n      }\n\n      if (nodes.length > 0) {\n        gltfScene.nodes = nodes;\n      }\n\n      serializeUserData(scene, gltfScene);\n    }\n    /**\n     * Creates a THREE.Scene to hold a list of objects and parse it\n     * @param  {Array} objects List of objects to process\n     */\n\n\n    function processObjects(objects) {\n      var scene = new THREE.Scene();\n      scene.name = 'AuxScene';\n\n      for (var i = 0; i < objects.length; i++) {\n        // We push directly to children instead of calling `add` to prevent\n        // modify the .parent and break its original scene and hierarchy\n        scene.children.push(objects[i]);\n      }\n\n      processScene(scene);\n    }\n\n    function processInput(input) {\n      input = input instanceof Array ? input : [input];\n      var objectsWithoutScene = [];\n\n      for (var i = 0; i < input.length; i++) {\n        if (input[i] instanceof THREE.Scene) {\n          processScene(input[i]);\n        } else {\n          objectsWithoutScene.push(input[i]);\n        }\n      }\n\n      if (objectsWithoutScene.length > 0) {\n        processObjects(objectsWithoutScene);\n      }\n\n      for (var i = 0; i < skins.length; ++i) {\n        processSkin(skins[i]);\n      }\n\n      for (var i = 0; i < options.animations.length; ++i) {\n        processAnimation(options.animations[i], input[0]);\n      }\n    }\n\n    processInput(input);\n    Promise.all(pending).then(function () {\n      // Merge buffers.\n      var blob = new Blob(buffers, {\n        type: 'application/octet-stream'\n      }); // Declare extensions.\n\n      var extensionsUsedList = Object.keys(extensionsUsed);\n      if (extensionsUsedList.length > 0) outputJSON.extensionsUsed = extensionsUsedList; // Update bytelength of the single buffer.\n\n      if (outputJSON.buffers && outputJSON.buffers.length > 0) outputJSON.buffers[0].byteLength = blob.size;\n\n      if (options.binary === true) {\n        // https://github.com/KhronosGroup/glTF/blob/master/specification/2.0/README.md#glb-file-format-specification\n        var GLB_HEADER_BYTES = 12;\n        var GLB_HEADER_MAGIC = 0x46546C67;\n        var GLB_VERSION = 2;\n        var GLB_CHUNK_PREFIX_BYTES = 8;\n        var GLB_CHUNK_TYPE_JSON = 0x4E4F534A;\n        var GLB_CHUNK_TYPE_BIN = 0x004E4942;\n        var reader = new window.FileReader();\n        reader.readAsArrayBuffer(blob);\n\n        reader.onloadend = function () {\n          // Binary chunk.\n          var binaryChunk = getPaddedArrayBuffer(reader.result);\n          var binaryChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n          binaryChunkPrefix.setUint32(0, binaryChunk.byteLength, true);\n          binaryChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_BIN, true); // JSON chunk.\n\n          var jsonChunk = getPaddedArrayBuffer(stringToArrayBuffer(JSON.stringify(outputJSON)), 0x20);\n          var jsonChunkPrefix = new DataView(new ArrayBuffer(GLB_CHUNK_PREFIX_BYTES));\n          jsonChunkPrefix.setUint32(0, jsonChunk.byteLength, true);\n          jsonChunkPrefix.setUint32(4, GLB_CHUNK_TYPE_JSON, true); // GLB header.\n\n          var header = new ArrayBuffer(GLB_HEADER_BYTES);\n          var headerView = new DataView(header);\n          headerView.setUint32(0, GLB_HEADER_MAGIC, true);\n          headerView.setUint32(4, GLB_VERSION, true);\n          var totalByteLength = GLB_HEADER_BYTES + jsonChunkPrefix.byteLength + jsonChunk.byteLength + binaryChunkPrefix.byteLength + binaryChunk.byteLength;\n          headerView.setUint32(8, totalByteLength, true);\n          var glbBlob = new Blob([header, jsonChunkPrefix, jsonChunk, binaryChunkPrefix, binaryChunk], {\n            type: 'application/octet-stream'\n          });\n          var glbReader = new window.FileReader();\n          glbReader.readAsArrayBuffer(glbBlob);\n\n          glbReader.onloadend = function () {\n            onDone(glbReader.result);\n          };\n        };\n      } else {\n        if (outputJSON.buffers && outputJSON.buffers.length > 0) {\n          var reader = new window.FileReader();\n          reader.readAsDataURL(blob);\n\n          reader.onloadend = function () {\n            var base64data = reader.result;\n            outputJSON.buffers[0].uri = base64data;\n            onDone(outputJSON);\n          };\n        } else {\n          onDone(outputJSON);\n        }\n      }\n    });\n  }\n};\nTHREE.GLTFExporter.Utils = {\n  insertKeyframe: function (track, time) {\n    var tolerance = 0.001; // 1ms\n\n    var valueSize = track.getValueSize();\n    var times = new track.TimeBufferType(track.times.length + 1);\n    var values = new track.ValueBufferType(track.values.length + valueSize);\n    var interpolant = track.createInterpolant(new track.ValueBufferType(valueSize));\n    var index;\n\n    if (track.times.length === 0) {\n      times[0] = time;\n\n      for (var i = 0; i < valueSize; i++) {\n        values[i] = 0;\n      }\n\n      index = 0;\n    } else if (time < track.times[0]) {\n      if (Math.abs(track.times[0] - time) < tolerance) return 0;\n      times[0] = time;\n      times.set(track.times, 1);\n      values.set(interpolant.evaluate(time), 0);\n      values.set(track.values, valueSize);\n      index = 0;\n    } else if (time > track.times[track.times.length - 1]) {\n      if (Math.abs(track.times[track.times.length - 1] - time) < tolerance) {\n        return track.times.length - 1;\n      }\n\n      times[times.length - 1] = time;\n      times.set(track.times, 0);\n      values.set(track.values, 0);\n      values.set(interpolant.evaluate(time), track.values.length);\n      index = times.length - 1;\n    } else {\n      for (var i = 0; i < track.times.length; i++) {\n        if (Math.abs(track.times[i] - time) < tolerance) return i;\n\n        if (track.times[i] < time && track.times[i + 1] > time) {\n          times.set(track.times.slice(0, i + 1), 0);\n          times[i + 1] = time;\n          times.set(track.times.slice(i + 1), i + 2);\n          values.set(track.values.slice(0, (i + 1) * valueSize), 0);\n          values.set(interpolant.evaluate(time), (i + 1) * valueSize);\n          values.set(track.values.slice((i + 1) * valueSize), (i + 2) * valueSize);\n          index = i + 1;\n          break;\n        }\n      }\n    }\n\n    track.times = times;\n    track.values = values;\n    return index;\n  },\n  mergeMorphTargetTracks: function (clip, root) {\n    var tracks = [];\n    var mergedTracks = {};\n    var sourceTracks = clip.tracks;\n\n    for (var i = 0; i < sourceTracks.length; ++i) {\n      var sourceTrack = sourceTracks[i];\n      var sourceTrackBinding = THREE.PropertyBinding.parseTrackName(sourceTrack.name);\n      var sourceTrackNode = THREE.PropertyBinding.findNode(root, sourceTrackBinding.nodeName);\n\n      if (sourceTrackBinding.propertyName !== 'morphTargetInfluences' || sourceTrackBinding.propertyIndex === undefined) {\n        // Tracks that don't affect morph targets, or that affect all morph targets together, can be left as-is.\n        tracks.push(sourceTrack);\n        continue;\n      }\n\n      if (sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodDiscrete && sourceTrack.createInterpolant !== sourceTrack.InterpolantFactoryMethodLinear) {\n        if (sourceTrack.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline) {\n          // This should never happen, because glTF morph target animations\n          // affect all targets already.\n          throw new Error('THREE.GLTFExporter: Cannot merge tracks with glTF CUBICSPLINE interpolation.');\n        }\n\n        console.warn('THREE.GLTFExporter: Morph target interpolation mode not yet supported. Using LINEAR instead.');\n        sourceTrack = sourceTrack.clone();\n        sourceTrack.setInterpolation(THREE.InterpolateLinear);\n      }\n\n      var targetCount = sourceTrackNode.morphTargetInfluences.length;\n      var targetIndex = sourceTrackNode.morphTargetDictionary[sourceTrackBinding.propertyIndex];\n\n      if (targetIndex === undefined) {\n        throw new Error('THREE.GLTFExporter: Morph target name not found: ' + sourceTrackBinding.propertyIndex);\n      }\n\n      var mergedTrack; // If this is the first time we've seen this object, create a new\n      // track to store merged keyframe data for each morph target.\n\n      if (mergedTracks[sourceTrackNode.uuid] === undefined) {\n        mergedTrack = sourceTrack.clone();\n        var values = new mergedTrack.ValueBufferType(targetCount * mergedTrack.times.length);\n\n        for (var j = 0; j < mergedTrack.times.length; j++) {\n          values[j * targetCount + targetIndex] = mergedTrack.values[j];\n        } // We need to take into consideration the intended target node\n        // of our original un-merged morphTarget animation.\n\n\n        mergedTrack.name = (sourceTrackBinding.nodeName || '') + '.morphTargetInfluences';\n        mergedTrack.values = values;\n        mergedTracks[sourceTrackNode.uuid] = mergedTrack;\n        tracks.push(mergedTrack);\n        continue;\n      }\n\n      var sourceInterpolant = sourceTrack.createInterpolant(new sourceTrack.ValueBufferType(1));\n      mergedTrack = mergedTracks[sourceTrackNode.uuid]; // For every existing keyframe of the merged track, write a (possibly\n      // interpolated) value from the source track.\n\n      for (var j = 0; j < mergedTrack.times.length; j++) {\n        mergedTrack.values[j * targetCount + targetIndex] = sourceInterpolant.evaluate(mergedTrack.times[j]);\n      } // For every existing keyframe of the source track, write a (possibly\n      // new) keyframe to the merged track. Values from the previous loop may\n      // be written again, but keyframes are de-duplicated.\n\n\n      for (var j = 0; j < sourceTrack.times.length; j++) {\n        var keyframeIndex = this.insertKeyframe(mergedTrack, sourceTrack.times[j]);\n        mergedTrack.values[keyframeIndex * targetCount + targetIndex] = sourceTrack.values[j];\n      }\n    }\n\n    clip.tracks = tracks;\n    return clip;\n  }\n};\n\n//# sourceURL=webpack:///./lib/GLTFExporter.js?");

/***/ }),

/***/ "./lib/LegacyGLTFLoader.js":
/*!*********************************!*\
  !*** ./lib/LegacyGLTFLoader.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/**\n * @author Rich Tibbett / https://github.com/richtr\n * @author mrdoob / http://mrdoob.com/\n * @author Tony Parisi / http://www.tonyparisi.com/\n * @author Takahiro / https://github.com/takahirox\n */\nTHREE.LegacyGLTFLoader = function () {\n  function LegacyGLTFLoader(manager) {\n    THREE.Loader.call(this, manager);\n  }\n\n  LegacyGLTFLoader.prototype = Object.assign(Object.create(THREE.Loader.prototype), {\n    constructor: LegacyGLTFLoader,\n    load: function (url, onLoad, onProgress, onError) {\n      var scope = this;\n      var resourcePath;\n\n      if (this.resourcePath !== '') {\n        resourcePath = this.resourcePath;\n      } else if (this.path !== '') {\n        resourcePath = this.path;\n      } else {\n        resourcePath = THREE.LoaderUtils.extractUrlBase(url);\n      }\n\n      var loader = new THREE.FileLoader(scope.manager);\n      loader.setPath(this.path);\n      loader.setResponseType('arraybuffer');\n      loader.load(url, function (data) {\n        scope.parse(data, resourcePath, onLoad);\n      }, onProgress, onError);\n    },\n    parse: function (data, path, callback) {\n      var content;\n      var extensions = {};\n      var magic = THREE.LoaderUtils.decodeText(new Uint8Array(data, 0, 4));\n\n      if (magic === BINARY_EXTENSION_HEADER_DEFAULTS.magic) {\n        extensions[EXTENSIONS.KHR_BINARY_GLTF] = new GLTFBinaryExtension(data);\n        content = extensions[EXTENSIONS.KHR_BINARY_GLTF].content;\n      } else {\n        content = THREE.LoaderUtils.decodeText(new Uint8Array(data));\n      }\n\n      var json = JSON.parse(content);\n\n      if (json.extensionsUsed && json.extensionsUsed.indexOf(EXTENSIONS.KHR_MATERIALS_COMMON) >= 0) {\n        extensions[EXTENSIONS.KHR_MATERIALS_COMMON] = new GLTFMaterialsCommonExtension(json);\n      }\n\n      var parser = new GLTFParser(json, extensions, {\n        crossOrigin: this.crossOrigin,\n        manager: this.manager,\n        path: path || this.resourcePath || ''\n      });\n      parser.parse(function (scene, scenes, cameras, animations) {\n        var glTF = {\n          \"scene\": scene,\n          \"scenes\": scenes,\n          \"cameras\": cameras,\n          \"animations\": animations\n        };\n        callback(glTF);\n      });\n    }\n  });\n  /* GLTFREGISTRY */\n\n  function GLTFRegistry() {\n    var objects = {};\n    return {\n      get: function (key) {\n        return objects[key];\n      },\n      add: function (key, object) {\n        objects[key] = object;\n      },\n      remove: function (key) {\n        delete objects[key];\n      },\n      removeAll: function () {\n        objects = {};\n      },\n      update: function (scene, camera) {\n        for (var name in objects) {\n          var object = objects[name];\n\n          if (object.update) {\n            object.update(scene, camera);\n          }\n        }\n      }\n    };\n  }\n  /* GLTFSHADERS */\n\n\n  LegacyGLTFLoader.Shaders = {\n    update: function () {\n      console.warn('THREE.LegacyGLTFLoader.Shaders has been deprecated, and now updates automatically.');\n    }\n  };\n  /* GLTFSHADER */\n\n  function GLTFShader(targetNode, allNodes) {\n    var boundUniforms = {}; // bind each uniform to its source node\n\n    var uniforms = targetNode.material.uniforms;\n\n    for (var uniformId in uniforms) {\n      var uniform = uniforms[uniformId];\n\n      if (uniform.semantic) {\n        var sourceNodeRef = uniform.node;\n        var sourceNode = targetNode;\n\n        if (sourceNodeRef) {\n          sourceNode = allNodes[sourceNodeRef];\n        }\n\n        boundUniforms[uniformId] = {\n          semantic: uniform.semantic,\n          sourceNode: sourceNode,\n          targetNode: targetNode,\n          uniform: uniform\n        };\n      }\n    }\n\n    this.boundUniforms = boundUniforms;\n    this._m4 = new THREE.Matrix4();\n  } // Update - update all the uniform values\n\n\n  GLTFShader.prototype.update = function (scene, camera) {\n    var boundUniforms = this.boundUniforms;\n\n    for (var name in boundUniforms) {\n      var boundUniform = boundUniforms[name];\n\n      switch (boundUniform.semantic) {\n        case \"MODELVIEW\":\n          var m4 = boundUniform.uniform.value;\n          m4.multiplyMatrices(camera.matrixWorldInverse, boundUniform.sourceNode.matrixWorld);\n          break;\n\n        case \"MODELVIEWINVERSETRANSPOSE\":\n          var m3 = boundUniform.uniform.value;\n\n          this._m4.multiplyMatrices(camera.matrixWorldInverse, boundUniform.sourceNode.matrixWorld);\n\n          m3.getNormalMatrix(this._m4);\n          break;\n\n        case \"PROJECTION\":\n          var m4 = boundUniform.uniform.value;\n          m4.copy(camera.projectionMatrix);\n          break;\n\n        case \"JOINTMATRIX\":\n          var m4v = boundUniform.uniform.value;\n\n          for (var mi = 0; mi < m4v.length; mi++) {\n            // So it goes like this:\n            // SkinnedMesh world matrix is already baked into MODELVIEW;\n            // transform joints to local space,\n            // then transform using joint's inverse\n            m4v[mi].getInverse(boundUniform.sourceNode.matrixWorld).multiply(boundUniform.targetNode.skeleton.bones[mi].matrixWorld).multiply(boundUniform.targetNode.skeleton.boneInverses[mi]).multiply(boundUniform.targetNode.bindMatrix);\n          }\n\n          break;\n\n        default:\n          console.warn(\"Unhandled shader semantic: \" + boundUniform.semantic);\n          break;\n      }\n    }\n  };\n  /* ANIMATION */\n\n\n  LegacyGLTFLoader.Animations = {\n    update: function () {\n      console.warn('THREE.LegacyGLTFLoader.Animation has been deprecated. Use THREE.AnimationMixer instead.');\n    }\n  };\n  /*********************************/\n\n  /********** EXTENSIONS ***********/\n\n  /*********************************/\n\n  var EXTENSIONS = {\n    KHR_BINARY_GLTF: 'KHR_binary_glTF',\n    KHR_MATERIALS_COMMON: 'KHR_materials_common'\n  };\n  /* MATERIALS COMMON EXTENSION */\n\n  function GLTFMaterialsCommonExtension(json) {\n    this.name = EXTENSIONS.KHR_MATERIALS_COMMON;\n    this.lights = {};\n    var extension = json.extensions && json.extensions[EXTENSIONS.KHR_MATERIALS_COMMON] || {};\n    var lights = extension.lights || {};\n\n    for (var lightId in lights) {\n      var light = lights[lightId];\n      var lightNode;\n      var lightParams = light[light.type];\n      var color = new THREE.Color().fromArray(lightParams.color);\n\n      switch (light.type) {\n        case \"directional\":\n          lightNode = new THREE.DirectionalLight(color);\n          lightNode.position.set(0, 0, 1);\n          break;\n\n        case \"point\":\n          lightNode = new THREE.PointLight(color);\n          break;\n\n        case \"spot\":\n          lightNode = new THREE.SpotLight(color);\n          lightNode.position.set(0, 0, 1);\n          break;\n\n        case \"ambient\":\n          lightNode = new THREE.AmbientLight(color);\n          break;\n      }\n\n      if (lightNode) {\n        this.lights[lightId] = lightNode;\n      }\n    }\n  }\n  /* BINARY EXTENSION */\n\n\n  var BINARY_EXTENSION_BUFFER_NAME = 'binary_glTF';\n  var BINARY_EXTENSION_HEADER_DEFAULTS = {\n    magic: 'glTF',\n    version: 1,\n    contentFormat: 0\n  };\n  var BINARY_EXTENSION_HEADER_LENGTH = 20;\n\n  function GLTFBinaryExtension(data) {\n    this.name = EXTENSIONS.KHR_BINARY_GLTF;\n    var headerView = new DataView(data, 0, BINARY_EXTENSION_HEADER_LENGTH);\n    var header = {\n      magic: THREE.LoaderUtils.decodeText(new Uint8Array(data.slice(0, 4))),\n      version: headerView.getUint32(4, true),\n      length: headerView.getUint32(8, true),\n      contentLength: headerView.getUint32(12, true),\n      contentFormat: headerView.getUint32(16, true)\n    };\n\n    for (var key in BINARY_EXTENSION_HEADER_DEFAULTS) {\n      var value = BINARY_EXTENSION_HEADER_DEFAULTS[key];\n\n      if (header[key] !== value) {\n        throw new Error('Unsupported glTF-Binary header: Expected \"%s\" to be \"%s\".', key, value);\n      }\n    }\n\n    var contentArray = new Uint8Array(data, BINARY_EXTENSION_HEADER_LENGTH, header.contentLength);\n    this.header = header;\n    this.content = THREE.LoaderUtils.decodeText(contentArray);\n    this.body = data.slice(BINARY_EXTENSION_HEADER_LENGTH + header.contentLength, header.length);\n  }\n\n  GLTFBinaryExtension.prototype.loadShader = function (shader, bufferViews) {\n    var bufferView = bufferViews[shader.extensions[EXTENSIONS.KHR_BINARY_GLTF].bufferView];\n    var array = new Uint8Array(bufferView);\n    return THREE.LoaderUtils.decodeText(array);\n  };\n  /*********************************/\n\n  /********** INTERNALS ************/\n\n  /*********************************/\n\n  /* CONSTANTS */\n\n\n  var WEBGL_CONSTANTS = {\n    FLOAT: 5126,\n    //FLOAT_MAT2: 35674,\n    FLOAT_MAT3: 35675,\n    FLOAT_MAT4: 35676,\n    FLOAT_VEC2: 35664,\n    FLOAT_VEC3: 35665,\n    FLOAT_VEC4: 35666,\n    LINEAR: 9729,\n    REPEAT: 10497,\n    SAMPLER_2D: 35678,\n    TRIANGLES: 4,\n    LINES: 1,\n    UNSIGNED_BYTE: 5121,\n    UNSIGNED_SHORT: 5123,\n    VERTEX_SHADER: 35633,\n    FRAGMENT_SHADER: 35632\n  };\n  var WEBGL_TYPE = {\n    5126: Number,\n    //35674: THREE.Matrix2,\n    35675: THREE.Matrix3,\n    35676: THREE.Matrix4,\n    35664: THREE.Vector2,\n    35665: THREE.Vector3,\n    35666: THREE.Vector4,\n    35678: THREE.Texture\n  };\n  var WEBGL_COMPONENT_TYPES = {\n    5120: Int8Array,\n    5121: Uint8Array,\n    5122: Int16Array,\n    5123: Uint16Array,\n    5125: Uint32Array,\n    5126: Float32Array\n  };\n  var WEBGL_FILTERS = {\n    9728: THREE.NearestFilter,\n    9729: THREE.LinearFilter,\n    9984: THREE.NearestMipmapNearestFilter,\n    9985: THREE.LinearMipmapNearestFilter,\n    9986: THREE.NearestMipmapLinearFilter,\n    9987: THREE.LinearMipmapLinearFilter\n  };\n  var WEBGL_WRAPPINGS = {\n    33071: THREE.ClampToEdgeWrapping,\n    33648: THREE.MirroredRepeatWrapping,\n    10497: THREE.RepeatWrapping\n  };\n  var WEBGL_TEXTURE_FORMATS = {\n    6406: THREE.AlphaFormat,\n    6407: THREE.RGBFormat,\n    6408: THREE.RGBAFormat,\n    6409: THREE.LuminanceFormat,\n    6410: THREE.LuminanceAlphaFormat\n  };\n  var WEBGL_TEXTURE_DATATYPES = {\n    5121: THREE.UnsignedByteType,\n    32819: THREE.UnsignedShort4444Type,\n    32820: THREE.UnsignedShort5551Type,\n    33635: THREE.UnsignedShort565Type\n  };\n  var WEBGL_SIDES = {\n    1028: THREE.BackSide,\n    // Culling front\n    1029: THREE.FrontSide // Culling back\n    //1032: THREE.NoSide   // Culling front and back, what to do?\n\n  };\n  var WEBGL_DEPTH_FUNCS = {\n    512: THREE.NeverDepth,\n    513: THREE.LessDepth,\n    514: THREE.EqualDepth,\n    515: THREE.LessEqualDepth,\n    516: THREE.GreaterEqualDepth,\n    517: THREE.NotEqualDepth,\n    518: THREE.GreaterEqualDepth,\n    519: THREE.AlwaysDepth\n  };\n  var WEBGL_BLEND_EQUATIONS = {\n    32774: THREE.AddEquation,\n    32778: THREE.SubtractEquation,\n    32779: THREE.ReverseSubtractEquation\n  };\n  var WEBGL_BLEND_FUNCS = {\n    0: THREE.ZeroFactor,\n    1: THREE.OneFactor,\n    768: THREE.SrcColorFactor,\n    769: THREE.OneMinusSrcColorFactor,\n    770: THREE.SrcAlphaFactor,\n    771: THREE.OneMinusSrcAlphaFactor,\n    772: THREE.DstAlphaFactor,\n    773: THREE.OneMinusDstAlphaFactor,\n    774: THREE.DstColorFactor,\n    775: THREE.OneMinusDstColorFactor,\n    776: THREE.SrcAlphaSaturateFactor // The followings are not supported by Three.js yet\n    //32769: CONSTANT_COLOR,\n    //32770: ONE_MINUS_CONSTANT_COLOR,\n    //32771: CONSTANT_ALPHA,\n    //32772: ONE_MINUS_CONSTANT_COLOR\n\n  };\n  var WEBGL_TYPE_SIZES = {\n    'SCALAR': 1,\n    'VEC2': 2,\n    'VEC3': 3,\n    'VEC4': 4,\n    'MAT2': 4,\n    'MAT3': 9,\n    'MAT4': 16\n  };\n  var PATH_PROPERTIES = {\n    scale: 'scale',\n    translation: 'position',\n    rotation: 'quaternion'\n  };\n  var INTERPOLATION = {\n    LINEAR: THREE.InterpolateLinear,\n    STEP: THREE.InterpolateDiscrete\n  };\n  var STATES_ENABLES = {\n    2884: 'CULL_FACE',\n    2929: 'DEPTH_TEST',\n    3042: 'BLEND',\n    3089: 'SCISSOR_TEST',\n    32823: 'POLYGON_OFFSET_FILL',\n    32926: 'SAMPLE_ALPHA_TO_COVERAGE'\n  };\n  /* UTILITY FUNCTIONS */\n\n  function _each(object, callback, thisObj) {\n    if (!object) {\n      return Promise.resolve();\n    }\n\n    var results;\n    var fns = [];\n\n    if (Object.prototype.toString.call(object) === '[object Array]') {\n      results = [];\n      var length = object.length;\n\n      for (var idx = 0; idx < length; idx++) {\n        var value = callback.call(thisObj || this, object[idx], idx);\n\n        if (value) {\n          fns.push(value);\n\n          if (value instanceof Promise) {\n            value.then(function (key, value) {\n              results[key] = value;\n            }.bind(this, idx));\n          } else {\n            results[idx] = value;\n          }\n        }\n      }\n    } else {\n      results = {};\n\n      for (var key in object) {\n        if (object.hasOwnProperty(key)) {\n          var value = callback.call(thisObj || this, object[key], key);\n\n          if (value) {\n            fns.push(value);\n\n            if (value instanceof Promise) {\n              value.then(function (key, value) {\n                results[key] = value;\n              }.bind(this, key));\n            } else {\n              results[key] = value;\n            }\n          }\n        }\n      }\n    }\n\n    return Promise.all(fns).then(function () {\n      return results;\n    });\n  }\n\n  function resolveURL(url, path) {\n    // Invalid URL\n    if (typeof url !== 'string' || url === '') return ''; // Absolute URL http://,https://,//\n\n    if (/^(https?:)?\\/\\//i.test(url)) {\n      return url;\n    } // Data URI\n\n\n    if (/^data:.*,.*$/i.test(url)) {\n      return url;\n    } // Blob URL\n\n\n    if (/^blob:.*$/i.test(url)) {\n      return url;\n    } // Relative URL\n\n\n    return (path || '') + url;\n  } // Three.js seems too dependent on attribute names so globally\n  // replace those in the shader code\n\n\n  function replaceTHREEShaderAttributes(shaderText, technique) {\n    // Expected technique attributes\n    var attributes = {};\n\n    for (var attributeId in technique.attributes) {\n      var pname = technique.attributes[attributeId];\n      var param = technique.parameters[pname];\n      var atype = param.type;\n      var semantic = param.semantic;\n      attributes[attributeId] = {\n        type: atype,\n        semantic: semantic\n      };\n    } // Figure out which attributes to change in technique\n\n\n    var shaderParams = technique.parameters;\n    var shaderAttributes = technique.attributes;\n    var params = {};\n\n    for (var attributeId in attributes) {\n      var pname = shaderAttributes[attributeId];\n      var shaderParam = shaderParams[pname];\n      var semantic = shaderParam.semantic;\n\n      if (semantic) {\n        params[attributeId] = shaderParam;\n      }\n    }\n\n    for (var pname in params) {\n      var param = params[pname];\n      var semantic = param.semantic;\n      var regEx = new RegExp(\"\\\\b\" + pname + \"\\\\b\", \"g\");\n\n      switch (semantic) {\n        case \"POSITION\":\n          shaderText = shaderText.replace(regEx, 'position');\n          break;\n\n        case \"NORMAL\":\n          shaderText = shaderText.replace(regEx, 'normal');\n          break;\n\n        case 'TEXCOORD_0':\n        case 'TEXCOORD0':\n        case 'TEXCOORD':\n          shaderText = shaderText.replace(regEx, 'uv');\n          break;\n\n        case 'TEXCOORD_1':\n          shaderText = shaderText.replace(regEx, 'uv2');\n          break;\n\n        case 'COLOR_0':\n        case 'COLOR0':\n        case 'COLOR':\n          shaderText = shaderText.replace(regEx, 'color');\n          break;\n\n        case \"WEIGHT\":\n          shaderText = shaderText.replace(regEx, 'skinWeight');\n          break;\n\n        case \"JOINT\":\n          shaderText = shaderText.replace(regEx, 'skinIndex');\n          break;\n      }\n    }\n\n    return shaderText;\n  }\n\n  function createDefaultMaterial() {\n    return new THREE.MeshPhongMaterial({\n      color: 0x00000,\n      emissive: 0x888888,\n      specular: 0x000000,\n      shininess: 0,\n      transparent: false,\n      depthTest: true,\n      side: THREE.FrontSide\n    });\n  } // Deferred constructor for RawShaderMaterial types\n\n\n  function DeferredShaderMaterial(params) {\n    this.isDeferredShaderMaterial = true;\n    this.params = params;\n  }\n\n  DeferredShaderMaterial.prototype.create = function () {\n    var uniforms = THREE.UniformsUtils.clone(this.params.uniforms);\n\n    for (var uniformId in this.params.uniforms) {\n      var originalUniform = this.params.uniforms[uniformId];\n\n      if (originalUniform.value instanceof THREE.Texture) {\n        uniforms[uniformId].value = originalUniform.value;\n        uniforms[uniformId].value.needsUpdate = true;\n      }\n\n      uniforms[uniformId].semantic = originalUniform.semantic;\n      uniforms[uniformId].node = originalUniform.node;\n    }\n\n    this.params.uniforms = uniforms;\n    return new THREE.RawShaderMaterial(this.params);\n  };\n  /* GLTF PARSER */\n\n\n  function GLTFParser(json, extensions, options) {\n    this.json = json || {};\n    this.extensions = extensions || {};\n    this.options = options || {}; // loader object cache\n\n    this.cache = new GLTFRegistry();\n  }\n\n  GLTFParser.prototype._withDependencies = function (dependencies) {\n    var _dependencies = {};\n\n    for (var i = 0; i < dependencies.length; i++) {\n      var dependency = dependencies[i];\n      var fnName = \"load\" + dependency.charAt(0).toUpperCase() + dependency.slice(1);\n      var cached = this.cache.get(dependency);\n\n      if (cached !== undefined) {\n        _dependencies[dependency] = cached;\n      } else if (this[fnName]) {\n        var fn = this[fnName]();\n        this.cache.add(dependency, fn);\n        _dependencies[dependency] = fn;\n      }\n    }\n\n    return _each(_dependencies, function (dependency) {\n      return dependency;\n    });\n  };\n\n  GLTFParser.prototype.parse = function (callback) {\n    var json = this.json; // Clear the loader cache\n\n    this.cache.removeAll(); // Fire the callback on complete\n\n    this._withDependencies([\"scenes\", \"cameras\", \"animations\"]).then(function (dependencies) {\n      var scenes = [];\n\n      for (var name in dependencies.scenes) {\n        scenes.push(dependencies.scenes[name]);\n      }\n\n      var scene = json.scene !== undefined ? dependencies.scenes[json.scene] : scenes[0];\n      var cameras = [];\n\n      for (var name in dependencies.cameras) {\n        var camera = dependencies.cameras[name];\n        cameras.push(camera);\n      }\n\n      var animations = [];\n\n      for (var name in dependencies.animations) {\n        animations.push(dependencies.animations[name]);\n      }\n\n      callback(scene, scenes, cameras, animations);\n    });\n  };\n\n  GLTFParser.prototype.loadShaders = function () {\n    var json = this.json;\n    var extensions = this.extensions;\n    var options = this.options;\n    return this._withDependencies([\"bufferViews\"]).then(function (dependencies) {\n      return _each(json.shaders, function (shader) {\n        if (shader.extensions && shader.extensions[EXTENSIONS.KHR_BINARY_GLTF]) {\n          return extensions[EXTENSIONS.KHR_BINARY_GLTF].loadShader(shader, dependencies.bufferViews);\n        }\n\n        return new Promise(function (resolve) {\n          var loader = new THREE.FileLoader(options.manager);\n          loader.setResponseType('text');\n          loader.load(resolveURL(shader.uri, options.path), function (shaderText) {\n            resolve(shaderText);\n          });\n        });\n      });\n    });\n  };\n\n  GLTFParser.prototype.loadBuffers = function () {\n    var json = this.json;\n    var extensions = this.extensions;\n    var options = this.options;\n    return _each(json.buffers, function (buffer, name) {\n      if (name === BINARY_EXTENSION_BUFFER_NAME) {\n        return extensions[EXTENSIONS.KHR_BINARY_GLTF].body;\n      }\n\n      if (buffer.type === 'arraybuffer' || buffer.type === undefined) {\n        return new Promise(function (resolve) {\n          var loader = new THREE.FileLoader(options.manager);\n          loader.setResponseType('arraybuffer');\n          loader.load(resolveURL(buffer.uri, options.path), function (buffer) {\n            resolve(buffer);\n          });\n        });\n      } else {\n        console.warn('THREE.LegacyGLTFLoader: ' + buffer.type + ' buffer type is not supported');\n      }\n    });\n  };\n\n  GLTFParser.prototype.loadBufferViews = function () {\n    var json = this.json;\n    return this._withDependencies([\"buffers\"]).then(function (dependencies) {\n      return _each(json.bufferViews, function (bufferView) {\n        var arraybuffer = dependencies.buffers[bufferView.buffer];\n        var byteLength = bufferView.byteLength !== undefined ? bufferView.byteLength : 0;\n        return arraybuffer.slice(bufferView.byteOffset, bufferView.byteOffset + byteLength);\n      });\n    });\n  };\n\n  GLTFParser.prototype.loadAccessors = function () {\n    var json = this.json;\n    return this._withDependencies([\"bufferViews\"]).then(function (dependencies) {\n      return _each(json.accessors, function (accessor) {\n        var arraybuffer = dependencies.bufferViews[accessor.bufferView];\n        var itemSize = WEBGL_TYPE_SIZES[accessor.type];\n        var TypedArray = WEBGL_COMPONENT_TYPES[accessor.componentType]; // For VEC3: itemSize is 3, elementBytes is 4, itemBytes is 12.\n\n        var elementBytes = TypedArray.BYTES_PER_ELEMENT;\n        var itemBytes = elementBytes * itemSize; // The buffer is not interleaved if the stride is the item size in bytes.\n\n        if (accessor.byteStride && accessor.byteStride !== itemBytes) {\n          // Use the full buffer if it's interleaved.\n          var array = new TypedArray(arraybuffer); // Integer parameters to IB/IBA are in array elements, not bytes.\n\n          var ib = new THREE.InterleavedBuffer(array, accessor.byteStride / elementBytes);\n          return new THREE.InterleavedBufferAttribute(ib, itemSize, accessor.byteOffset / elementBytes);\n        } else {\n          array = new TypedArray(arraybuffer, accessor.byteOffset, accessor.count * itemSize);\n          return new THREE.BufferAttribute(array, itemSize);\n        }\n      });\n    });\n  };\n\n  GLTFParser.prototype.loadTextures = function () {\n    var json = this.json;\n    var options = this.options;\n    return this._withDependencies([\"bufferViews\"]).then(function (dependencies) {\n      return _each(json.textures, function (texture) {\n        if (texture.source) {\n          return new Promise(function (resolve) {\n            var source = json.images[texture.source];\n            var sourceUri = source.uri;\n            var isObjectURL = false;\n\n            if (source.extensions && source.extensions[EXTENSIONS.KHR_BINARY_GLTF]) {\n              var metadata = source.extensions[EXTENSIONS.KHR_BINARY_GLTF];\n              var bufferView = dependencies.bufferViews[metadata.bufferView];\n              var blob = new Blob([bufferView], {\n                type: metadata.mimeType\n              });\n              sourceUri = URL.createObjectURL(blob);\n              isObjectURL = true;\n            }\n\n            var textureLoader = options.manager.getHandler(sourceUri);\n\n            if (textureLoader === null) {\n              textureLoader = new THREE.TextureLoader(options.manager);\n            }\n\n            textureLoader.setCrossOrigin(options.crossOrigin);\n            textureLoader.load(resolveURL(sourceUri, options.path), function (_texture) {\n              if (isObjectURL) URL.revokeObjectURL(sourceUri);\n              _texture.flipY = false;\n              if (texture.name !== undefined) _texture.name = texture.name;\n              _texture.format = texture.format !== undefined ? WEBGL_TEXTURE_FORMATS[texture.format] : THREE.RGBAFormat;\n\n              if (texture.internalFormat !== undefined && _texture.format !== WEBGL_TEXTURE_FORMATS[texture.internalFormat]) {\n                console.warn('THREE.LegacyGLTFLoader: Three.js doesn\\'t support texture internalFormat which is different from texture format. ' + 'internalFormat will be forced to be the same value as format.');\n              }\n\n              _texture.type = texture.type !== undefined ? WEBGL_TEXTURE_DATATYPES[texture.type] : THREE.UnsignedByteType;\n\n              if (texture.sampler) {\n                var sampler = json.samplers[texture.sampler];\n                _texture.magFilter = WEBGL_FILTERS[sampler.magFilter] || THREE.LinearFilter;\n                _texture.minFilter = WEBGL_FILTERS[sampler.minFilter] || THREE.NearestMipmapLinearFilter;\n                _texture.wrapS = WEBGL_WRAPPINGS[sampler.wrapS] || THREE.RepeatWrapping;\n                _texture.wrapT = WEBGL_WRAPPINGS[sampler.wrapT] || THREE.RepeatWrapping;\n              }\n\n              resolve(_texture);\n            }, undefined, function () {\n              if (isObjectURL) URL.revokeObjectURL(sourceUri);\n              resolve();\n            });\n          });\n        }\n      });\n    });\n  };\n\n  GLTFParser.prototype.loadMaterials = function () {\n    var json = this.json;\n    return this._withDependencies([\"shaders\", \"textures\"]).then(function (dependencies) {\n      return _each(json.materials, function (material) {\n        var materialType;\n        var materialValues = {};\n        var materialParams = {};\n        var khr_material;\n\n        if (material.extensions && material.extensions[EXTENSIONS.KHR_MATERIALS_COMMON]) {\n          khr_material = material.extensions[EXTENSIONS.KHR_MATERIALS_COMMON];\n        }\n\n        if (khr_material) {\n          // don't copy over unused values to avoid material warning spam\n          var keys = ['ambient', 'emission', 'transparent', 'transparency', 'doubleSided'];\n\n          switch (khr_material.technique) {\n            case 'BLINN':\n            case 'PHONG':\n              materialType = THREE.MeshPhongMaterial;\n              keys.push('diffuse', 'specular', 'shininess');\n              break;\n\n            case 'LAMBERT':\n              materialType = THREE.MeshLambertMaterial;\n              keys.push('diffuse');\n              break;\n\n            case 'CONSTANT':\n            default:\n              materialType = THREE.MeshBasicMaterial;\n              break;\n          }\n\n          keys.forEach(function (v) {\n            if (khr_material.values[v] !== undefined) materialValues[v] = khr_material.values[v];\n          });\n\n          if (khr_material.doubleSided || materialValues.doubleSided) {\n            materialParams.side = THREE.DoubleSide;\n          }\n\n          if (khr_material.transparent || materialValues.transparent) {\n            materialParams.transparent = true;\n            materialParams.opacity = materialValues.transparency !== undefined ? materialValues.transparency : 1;\n          }\n        } else if (material.technique === undefined) {\n          materialType = THREE.MeshPhongMaterial;\n          Object.assign(materialValues, material.values);\n        } else {\n          materialType = DeferredShaderMaterial;\n          var technique = json.techniques[material.technique];\n          materialParams.uniforms = {};\n          var program = json.programs[technique.program];\n\n          if (program) {\n            materialParams.fragmentShader = dependencies.shaders[program.fragmentShader];\n\n            if (!materialParams.fragmentShader) {\n              console.warn(\"ERROR: Missing fragment shader definition:\", program.fragmentShader);\n              materialType = THREE.MeshPhongMaterial;\n            }\n\n            var vertexShader = dependencies.shaders[program.vertexShader];\n\n            if (!vertexShader) {\n              console.warn(\"ERROR: Missing vertex shader definition:\", program.vertexShader);\n              materialType = THREE.MeshPhongMaterial;\n            } // IMPORTANT: FIX VERTEX SHADER ATTRIBUTE DEFINITIONS\n\n\n            materialParams.vertexShader = replaceTHREEShaderAttributes(vertexShader, technique);\n            var uniforms = technique.uniforms;\n\n            for (var uniformId in uniforms) {\n              var pname = uniforms[uniformId];\n              var shaderParam = technique.parameters[pname];\n              var ptype = shaderParam.type;\n\n              if (WEBGL_TYPE[ptype]) {\n                var pcount = shaderParam.count;\n                var value;\n                if (material.values !== undefined) value = material.values[pname];\n                var uvalue = new WEBGL_TYPE[ptype]();\n                var usemantic = shaderParam.semantic;\n                var unode = shaderParam.node;\n\n                switch (ptype) {\n                  case WEBGL_CONSTANTS.FLOAT:\n                    uvalue = shaderParam.value;\n\n                    if (pname == \"transparency\") {\n                      materialParams.transparent = true;\n                    }\n\n                    if (value !== undefined) {\n                      uvalue = value;\n                    }\n\n                    break;\n\n                  case WEBGL_CONSTANTS.FLOAT_VEC2:\n                  case WEBGL_CONSTANTS.FLOAT_VEC3:\n                  case WEBGL_CONSTANTS.FLOAT_VEC4:\n                  case WEBGL_CONSTANTS.FLOAT_MAT3:\n                    if (shaderParam && shaderParam.value) {\n                      uvalue.fromArray(shaderParam.value);\n                    }\n\n                    if (value) {\n                      uvalue.fromArray(value);\n                    }\n\n                    break;\n\n                  case WEBGL_CONSTANTS.FLOAT_MAT2:\n                    // what to do?\n                    console.warn(\"FLOAT_MAT2 is not a supported uniform type\");\n                    break;\n\n                  case WEBGL_CONSTANTS.FLOAT_MAT4:\n                    if (pcount) {\n                      uvalue = new Array(pcount);\n\n                      for (var mi = 0; mi < pcount; mi++) {\n                        uvalue[mi] = new WEBGL_TYPE[ptype]();\n                      }\n\n                      if (shaderParam && shaderParam.value) {\n                        var m4v = shaderParam.value;\n                        uvalue.fromArray(m4v);\n                      }\n\n                      if (value) {\n                        uvalue.fromArray(value);\n                      }\n                    } else {\n                      if (shaderParam && shaderParam.value) {\n                        var m4 = shaderParam.value;\n                        uvalue.fromArray(m4);\n                      }\n\n                      if (value) {\n                        uvalue.fromArray(value);\n                      }\n                    }\n\n                    break;\n\n                  case WEBGL_CONSTANTS.SAMPLER_2D:\n                    if (value !== undefined) {\n                      uvalue = dependencies.textures[value];\n                    } else if (shaderParam.value !== undefined) {\n                      uvalue = dependencies.textures[shaderParam.value];\n                    } else {\n                      uvalue = null;\n                    }\n\n                    break;\n                }\n\n                materialParams.uniforms[uniformId] = {\n                  value: uvalue,\n                  semantic: usemantic,\n                  node: unode\n                };\n              } else {\n                throw new Error(\"Unknown shader uniform param type: \" + ptype);\n              }\n            }\n\n            var states = technique.states || {};\n            var enables = states.enable || [];\n            var functions = states.functions || {};\n            var enableCullFace = false;\n            var enableDepthTest = false;\n            var enableBlend = false;\n\n            for (var i = 0, il = enables.length; i < il; i++) {\n              var enable = enables[i];\n\n              switch (STATES_ENABLES[enable]) {\n                case 'CULL_FACE':\n                  enableCullFace = true;\n                  break;\n\n                case 'DEPTH_TEST':\n                  enableDepthTest = true;\n                  break;\n\n                case 'BLEND':\n                  enableBlend = true;\n                  break;\n                // TODO: implement\n\n                case 'SCISSOR_TEST':\n                case 'POLYGON_OFFSET_FILL':\n                case 'SAMPLE_ALPHA_TO_COVERAGE':\n                  break;\n\n                default:\n                  throw new Error(\"Unknown technique.states.enable: \" + enable);\n              }\n            }\n\n            if (enableCullFace) {\n              materialParams.side = functions.cullFace !== undefined ? WEBGL_SIDES[functions.cullFace] : THREE.FrontSide;\n            } else {\n              materialParams.side = THREE.DoubleSide;\n            }\n\n            materialParams.depthTest = enableDepthTest;\n            materialParams.depthFunc = functions.depthFunc !== undefined ? WEBGL_DEPTH_FUNCS[functions.depthFunc] : THREE.LessDepth;\n            materialParams.depthWrite = functions.depthMask !== undefined ? functions.depthMask[0] : true;\n            materialParams.blending = enableBlend ? THREE.CustomBlending : THREE.NoBlending;\n            materialParams.transparent = enableBlend;\n            var blendEquationSeparate = functions.blendEquationSeparate;\n\n            if (blendEquationSeparate !== undefined) {\n              materialParams.blendEquation = WEBGL_BLEND_EQUATIONS[blendEquationSeparate[0]];\n              materialParams.blendEquationAlpha = WEBGL_BLEND_EQUATIONS[blendEquationSeparate[1]];\n            } else {\n              materialParams.blendEquation = THREE.AddEquation;\n              materialParams.blendEquationAlpha = THREE.AddEquation;\n            }\n\n            var blendFuncSeparate = functions.blendFuncSeparate;\n\n            if (blendFuncSeparate !== undefined) {\n              materialParams.blendSrc = WEBGL_BLEND_FUNCS[blendFuncSeparate[0]];\n              materialParams.blendDst = WEBGL_BLEND_FUNCS[blendFuncSeparate[1]];\n              materialParams.blendSrcAlpha = WEBGL_BLEND_FUNCS[blendFuncSeparate[2]];\n              materialParams.blendDstAlpha = WEBGL_BLEND_FUNCS[blendFuncSeparate[3]];\n            } else {\n              materialParams.blendSrc = THREE.OneFactor;\n              materialParams.blendDst = THREE.ZeroFactor;\n              materialParams.blendSrcAlpha = THREE.OneFactor;\n              materialParams.blendDstAlpha = THREE.ZeroFactor;\n            }\n          }\n        }\n\n        if (Array.isArray(materialValues.diffuse)) {\n          materialParams.color = new THREE.Color().fromArray(materialValues.diffuse);\n        } else if (typeof materialValues.diffuse === 'string') {\n          materialParams.map = dependencies.textures[materialValues.diffuse];\n        }\n\n        delete materialParams.diffuse;\n\n        if (typeof materialValues.reflective === 'string') {\n          materialParams.envMap = dependencies.textures[materialValues.reflective];\n        }\n\n        if (typeof materialValues.bump === 'string') {\n          materialParams.bumpMap = dependencies.textures[materialValues.bump];\n        }\n\n        if (Array.isArray(materialValues.emission)) {\n          if (materialType === THREE.MeshBasicMaterial) {\n            materialParams.color = new THREE.Color().fromArray(materialValues.emission);\n          } else {\n            materialParams.emissive = new THREE.Color().fromArray(materialValues.emission);\n          }\n        } else if (typeof materialValues.emission === 'string') {\n          if (materialType === THREE.MeshBasicMaterial) {\n            materialParams.map = dependencies.textures[materialValues.emission];\n          } else {\n            materialParams.emissiveMap = dependencies.textures[materialValues.emission];\n          }\n        }\n\n        if (Array.isArray(materialValues.specular)) {\n          materialParams.specular = new THREE.Color().fromArray(materialValues.specular);\n        } else if (typeof materialValues.specular === 'string') {\n          materialParams.specularMap = dependencies.textures[materialValues.specular];\n        }\n\n        if (materialValues.shininess !== undefined) {\n          materialParams.shininess = materialValues.shininess;\n        }\n\n        var _material = new materialType(materialParams);\n\n        if (material.name !== undefined) _material.name = material.name;\n        return _material;\n      });\n    });\n  };\n\n  GLTFParser.prototype.loadMeshes = function () {\n    var json = this.json;\n    return this._withDependencies([\"accessors\", \"materials\"]).then(function (dependencies) {\n      return _each(json.meshes, function (mesh) {\n        var group = new THREE.Group();\n        if (mesh.name !== undefined) group.name = mesh.name;\n        if (mesh.extras) group.userData = mesh.extras;\n        var primitives = mesh.primitives || [];\n\n        for (var name in primitives) {\n          var primitive = primitives[name];\n\n          if (primitive.mode === WEBGL_CONSTANTS.TRIANGLES || primitive.mode === undefined) {\n            var geometry = new THREE.BufferGeometry();\n            var attributes = primitive.attributes;\n\n            for (var attributeId in attributes) {\n              var attributeEntry = attributes[attributeId];\n              if (!attributeEntry) return;\n              var bufferAttribute = dependencies.accessors[attributeEntry];\n\n              switch (attributeId) {\n                case 'POSITION':\n                  geometry.setAttribute('position', bufferAttribute);\n                  break;\n\n                case 'NORMAL':\n                  geometry.setAttribute('normal', bufferAttribute);\n                  break;\n\n                case 'TEXCOORD_0':\n                case 'TEXCOORD0':\n                case 'TEXCOORD':\n                  geometry.setAttribute('uv', bufferAttribute);\n                  break;\n\n                case 'TEXCOORD_1':\n                  geometry.setAttribute('uv2', bufferAttribute);\n                  break;\n\n                case 'COLOR_0':\n                case 'COLOR0':\n                case 'COLOR':\n                  geometry.setAttribute('color', bufferAttribute);\n                  break;\n\n                case 'WEIGHT':\n                  geometry.setAttribute('skinWeight', bufferAttribute);\n                  break;\n\n                case 'JOINT':\n                  geometry.setAttribute('skinIndex', bufferAttribute);\n                  break;\n\n                default:\n                  if (!primitive.material) break;\n                  var material = json.materials[primitive.material];\n                  if (!material.technique) break;\n                  var parameters = json.techniques[material.technique].parameters || {};\n\n                  for (var attributeName in parameters) {\n                    if (parameters[attributeName]['semantic'] === attributeId) {\n                      geometry.setAttribute(attributeName, bufferAttribute);\n                    }\n                  }\n\n              }\n            }\n\n            if (primitive.indices) {\n              geometry.setIndex(dependencies.accessors[primitive.indices]);\n            }\n\n            var material = dependencies.materials !== undefined ? dependencies.materials[primitive.material] : createDefaultMaterial();\n            var meshNode = new THREE.Mesh(geometry, material);\n            meshNode.castShadow = true;\n            meshNode.name = name === \"0\" ? group.name : group.name + name;\n            if (primitive.extras) meshNode.userData = primitive.extras;\n            group.add(meshNode);\n          } else if (primitive.mode === WEBGL_CONSTANTS.LINES) {\n            var geometry = new THREE.BufferGeometry();\n            var attributes = primitive.attributes;\n\n            for (var attributeId in attributes) {\n              var attributeEntry = attributes[attributeId];\n              if (!attributeEntry) return;\n              var bufferAttribute = dependencies.accessors[attributeEntry];\n\n              switch (attributeId) {\n                case 'POSITION':\n                  geometry.setAttribute('position', bufferAttribute);\n                  break;\n\n                case 'COLOR_0':\n                case 'COLOR0':\n                case 'COLOR':\n                  geometry.setAttribute('color', bufferAttribute);\n                  break;\n              }\n            }\n\n            var material = dependencies.materials[primitive.material];\n            var meshNode;\n\n            if (primitive.indices) {\n              geometry.setIndex(dependencies.accessors[primitive.indices]);\n              meshNode = new THREE.LineSegments(geometry, material);\n            } else {\n              meshNode = new THREE.Line(geometry, material);\n            }\n\n            meshNode.name = name === \"0\" ? group.name : group.name + name;\n            if (primitive.extras) meshNode.userData = primitive.extras;\n            group.add(meshNode);\n          } else {\n            console.warn(\"Only triangular and line primitives are supported\");\n          }\n        }\n\n        return group;\n      });\n    });\n  };\n\n  GLTFParser.prototype.loadCameras = function () {\n    var json = this.json;\n    return _each(json.cameras, function (camera) {\n      if (camera.type == \"perspective\" && camera.perspective) {\n        var yfov = camera.perspective.yfov;\n        var aspectRatio = camera.perspective.aspectRatio !== undefined ? camera.perspective.aspectRatio : 1; // According to COLLADA spec...\n        // aspectRatio = xfov / yfov\n\n        var xfov = yfov * aspectRatio;\n\n        var _camera = new THREE.PerspectiveCamera(THREE.Math.radToDeg(xfov), aspectRatio, camera.perspective.znear || 1, camera.perspective.zfar || 2e6);\n\n        if (camera.name !== undefined) _camera.name = camera.name;\n        if (camera.extras) _camera.userData = camera.extras;\n        return _camera;\n      } else if (camera.type == \"orthographic\" && camera.orthographic) {\n        var _camera = new THREE.OrthographicCamera(window.innerWidth / -2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / -2, camera.orthographic.znear, camera.orthographic.zfar);\n\n        if (camera.name !== undefined) _camera.name = camera.name;\n        if (camera.extras) _camera.userData = camera.extras;\n        return _camera;\n      }\n    });\n  };\n\n  GLTFParser.prototype.loadSkins = function () {\n    var json = this.json;\n    return this._withDependencies([\"accessors\"]).then(function (dependencies) {\n      return _each(json.skins, function (skin) {\n        var bindShapeMatrix = new THREE.Matrix4();\n        if (skin.bindShapeMatrix !== undefined) bindShapeMatrix.fromArray(skin.bindShapeMatrix);\n        var _skin = {\n          bindShapeMatrix: bindShapeMatrix,\n          jointNames: skin.jointNames,\n          inverseBindMatrices: dependencies.accessors[skin.inverseBindMatrices]\n        };\n        return _skin;\n      });\n    });\n  };\n\n  GLTFParser.prototype.loadAnimations = function () {\n    var json = this.json;\n    return this._withDependencies([\"accessors\", \"nodes\"]).then(function (dependencies) {\n      return _each(json.animations, function (animation, animationId) {\n        var tracks = [];\n\n        for (var channelId in animation.channels) {\n          var channel = animation.channels[channelId];\n          var sampler = animation.samplers[channel.sampler];\n\n          if (sampler) {\n            var target = channel.target;\n            var name = target.id;\n            var input = animation.parameters !== undefined ? animation.parameters[sampler.input] : sampler.input;\n            var output = animation.parameters !== undefined ? animation.parameters[sampler.output] : sampler.output;\n            var inputAccessor = dependencies.accessors[input];\n            var outputAccessor = dependencies.accessors[output];\n            var node = dependencies.nodes[name];\n\n            if (node) {\n              node.updateMatrix();\n              node.matrixAutoUpdate = true;\n              var TypedKeyframeTrack = PATH_PROPERTIES[target.path] === PATH_PROPERTIES.rotation ? THREE.QuaternionKeyframeTrack : THREE.VectorKeyframeTrack;\n              var targetName = node.name ? node.name : node.uuid;\n              var interpolation = sampler.interpolation !== undefined ? INTERPOLATION[sampler.interpolation] : THREE.InterpolateLinear; // KeyframeTrack.optimize() will modify given 'times' and 'values'\n              // buffers before creating a truncated copy to keep. Because buffers may\n              // be reused by other tracks, make copies here.\n\n              tracks.push(new TypedKeyframeTrack(targetName + '.' + PATH_PROPERTIES[target.path], THREE.AnimationUtils.arraySlice(inputAccessor.array, 0), THREE.AnimationUtils.arraySlice(outputAccessor.array, 0), interpolation));\n            }\n          }\n        }\n\n        var name = animation.name !== undefined ? animation.name : \"animation_\" + animationId;\n        return new THREE.AnimationClip(name, undefined, tracks);\n      });\n    });\n  };\n\n  GLTFParser.prototype.loadNodes = function () {\n    var json = this.json;\n    var extensions = this.extensions;\n    var scope = this;\n    return _each(json.nodes, function (node) {\n      var matrix = new THREE.Matrix4();\n\n      var _node;\n\n      if (node.jointName) {\n        _node = new THREE.Bone();\n        _node.name = node.name !== undefined ? node.name : node.jointName;\n        _node.jointName = node.jointName;\n      } else {\n        _node = new THREE.Object3D();\n        if (node.name !== undefined) _node.name = node.name;\n      }\n\n      if (node.extras) _node.userData = node.extras;\n\n      if (node.matrix !== undefined) {\n        matrix.fromArray(node.matrix);\n\n        _node.applyMatrix(matrix);\n      } else {\n        if (node.translation !== undefined) {\n          _node.position.fromArray(node.translation);\n        }\n\n        if (node.rotation !== undefined) {\n          _node.quaternion.fromArray(node.rotation);\n        }\n\n        if (node.scale !== undefined) {\n          _node.scale.fromArray(node.scale);\n        }\n      }\n\n      return _node;\n    }).then(function (__nodes) {\n      return scope._withDependencies([\"meshes\", \"skins\", \"cameras\"]).then(function (dependencies) {\n        return _each(__nodes, function (_node, nodeId) {\n          var node = json.nodes[nodeId];\n\n          if (node.meshes !== undefined) {\n            for (var meshId in node.meshes) {\n              var mesh = node.meshes[meshId];\n              var group = dependencies.meshes[mesh];\n\n              if (group === undefined) {\n                console.warn('LegacyGLTFLoader: Couldn\\'t find node \"' + mesh + '\".');\n                continue;\n              }\n\n              for (var childrenId in group.children) {\n                var child = group.children[childrenId]; // clone Mesh to add to _node\n\n                var originalMaterial = child.material;\n                var originalGeometry = child.geometry;\n                var originalUserData = child.userData;\n                var originalName = child.name;\n                var material;\n\n                if (originalMaterial.isDeferredShaderMaterial) {\n                  originalMaterial = material = originalMaterial.create();\n                } else {\n                  material = originalMaterial;\n                }\n\n                switch (child.type) {\n                  case 'LineSegments':\n                    child = new THREE.LineSegments(originalGeometry, material);\n                    break;\n\n                  case 'LineLoop':\n                    child = new THREE.LineLoop(originalGeometry, material);\n                    break;\n\n                  case 'Line':\n                    child = new THREE.Line(originalGeometry, material);\n                    break;\n\n                  default:\n                    child = new THREE.Mesh(originalGeometry, material);\n                }\n\n                child.castShadow = true;\n                child.userData = originalUserData;\n                child.name = originalName;\n                var skinEntry;\n\n                if (node.skin) {\n                  skinEntry = dependencies.skins[node.skin];\n                } // Replace Mesh with SkinnedMesh in library\n\n\n                if (skinEntry) {\n                  var getJointNode = function (jointId) {\n                    var keys = Object.keys(__nodes);\n\n                    for (var i = 0, il = keys.length; i < il; i++) {\n                      var n = __nodes[keys[i]];\n                      if (n.jointName === jointId) return n;\n                    }\n\n                    return null;\n                  };\n\n                  var geometry = originalGeometry;\n                  var material = originalMaterial;\n                  material.skinning = true;\n                  child = new THREE.SkinnedMesh(geometry, material);\n                  child.castShadow = true;\n                  child.userData = originalUserData;\n                  child.name = originalName;\n                  var bones = [];\n                  var boneInverses = [];\n\n                  for (var i = 0, l = skinEntry.jointNames.length; i < l; i++) {\n                    var jointId = skinEntry.jointNames[i];\n                    var jointNode = getJointNode(jointId);\n\n                    if (jointNode) {\n                      bones.push(jointNode);\n                      var m = skinEntry.inverseBindMatrices.array;\n                      var mat = new THREE.Matrix4().fromArray(m, i * 16);\n                      boneInverses.push(mat);\n                    } else {\n                      console.warn(\"WARNING: joint: '\" + jointId + \"' could not be found\");\n                    }\n                  }\n\n                  child.bind(new THREE.Skeleton(bones, boneInverses), skinEntry.bindShapeMatrix);\n\n                  var buildBoneGraph = function (parentJson, parentObject, property) {\n                    var children = parentJson[property];\n                    if (children === undefined) return;\n\n                    for (var i = 0, il = children.length; i < il; i++) {\n                      var nodeId = children[i];\n                      var bone = __nodes[nodeId];\n                      var boneJson = json.nodes[nodeId];\n\n                      if (bone !== undefined && bone.isBone === true && boneJson !== undefined) {\n                        parentObject.add(bone);\n                        buildBoneGraph(boneJson, bone, 'children');\n                      }\n                    }\n                  };\n\n                  buildBoneGraph(node, child, 'skeletons');\n                }\n\n                _node.add(child);\n              }\n            }\n          }\n\n          if (node.camera !== undefined) {\n            var camera = dependencies.cameras[node.camera];\n\n            _node.add(camera);\n          }\n\n          if (node.extensions && node.extensions[EXTENSIONS.KHR_MATERIALS_COMMON] && node.extensions[EXTENSIONS.KHR_MATERIALS_COMMON].light) {\n            var extensionLights = extensions[EXTENSIONS.KHR_MATERIALS_COMMON].lights;\n            var light = extensionLights[node.extensions[EXTENSIONS.KHR_MATERIALS_COMMON].light];\n\n            _node.add(light);\n          }\n\n          return _node;\n        });\n      });\n    });\n  };\n\n  GLTFParser.prototype.loadScenes = function () {\n    var json = this.json; // scene node hierachy builder\n\n    function buildNodeHierachy(nodeId, parentObject, allNodes) {\n      var _node = allNodes[nodeId];\n      parentObject.add(_node);\n      var node = json.nodes[nodeId];\n\n      if (node.children) {\n        var children = node.children;\n\n        for (var i = 0, l = children.length; i < l; i++) {\n          var child = children[i];\n          buildNodeHierachy(child, _node, allNodes);\n        }\n      }\n    }\n\n    return this._withDependencies([\"nodes\"]).then(function (dependencies) {\n      return _each(json.scenes, function (scene) {\n        var _scene = new THREE.Scene();\n\n        if (scene.name !== undefined) _scene.name = scene.name;\n        if (scene.extras) _scene.userData = scene.extras;\n        var nodes = scene.nodes || [];\n\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          var nodeId = nodes[i];\n          buildNodeHierachy(nodeId, _scene, dependencies.nodes);\n        }\n\n        _scene.traverse(function (child) {\n          // Register raw material meshes with LegacyGLTFLoader.Shaders\n          if (child.material && child.material.isRawShaderMaterial) {\n            child.gltfShader = new GLTFShader(child, dependencies.nodes);\n\n            child.onBeforeRender = function (renderer, scene, camera) {\n              this.gltfShader.update(scene, camera);\n            };\n          }\n        });\n\n        return _scene;\n      });\n    });\n  };\n\n  return LegacyGLTFLoader;\n}();\n\n//# sourceURL=webpack:///./lib/LegacyGLTFLoader.js?");

/***/ }),

/***/ "./node_modules/localforage/dist/localforage.js":
/*!******************************************************!*\
  !*** ./node_modules/localforage/dist/localforage.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/*!\n    localForage -- Offline Storage, Improved\n    Version 1.9.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb || !idb.open) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\n        // Note: this creates issues with `window.fetch` polyfills and\n        // overrides; see:\n        // https://github.com/localForage/localForage/issues/856\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            resolve(openreq.result);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback returns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openKeyCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openKeyCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = req.onblocked = function (err) {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(err);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/localforage/dist/localforage.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ })

/******/ });
});